// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/models/shared"
	"net/http"
)

// GetSubRecursosAutorizacionInicioPagoAspsp - Nombre del ASPSP al que desea realizar la petición.(BBVA, Banco Santander ...)
type GetSubRecursosAutorizacionInicioPagoAspsp string

const (
	GetSubRecursosAutorizacionInicioPagoAspspRedsys          GetSubRecursosAutorizacionInicioPagoAspsp = "redsys"
	GetSubRecursosAutorizacionInicioPagoAspspBbva            GetSubRecursosAutorizacionInicioPagoAspsp = "BBVA"
	GetSubRecursosAutorizacionInicioPagoAspspBbvapt          GetSubRecursosAutorizacionInicioPagoAspsp = "BBVAPT"
	GetSubRecursosAutorizacionInicioPagoAspspBbvabe          GetSubRecursosAutorizacionInicioPagoAspsp = "BBVABE"
	GetSubRecursosAutorizacionInicioPagoAspspBbvafr          GetSubRecursosAutorizacionInicioPagoAspsp = "BBVAFR"
	GetSubRecursosAutorizacionInicioPagoAspspBbvaeuk         GetSubRecursosAutorizacionInicioPagoAspsp = "BBVAEUK"
	GetSubRecursosAutorizacionInicioPagoAspspCaixabank       GetSubRecursosAutorizacionInicioPagoAspsp = "caixabank"
	GetSubRecursosAutorizacionInicioPagoAspspBancSabadell    GetSubRecursosAutorizacionInicioPagoAspsp = "BancSabadell"
	GetSubRecursosAutorizacionInicioPagoAspspBancosantander  GetSubRecursosAutorizacionInicioPagoAspsp = "bancosantander"
	GetSubRecursosAutorizacionInicioPagoAspspBancamarch      GetSubRecursosAutorizacionInicioPagoAspsp = "bancamarch"
	GetSubRecursosAutorizacionInicioPagoAspspBankoa          GetSubRecursosAutorizacionInicioPagoAspsp = "bankoa"
	GetSubRecursosAutorizacionInicioPagoAspspCajamar         GetSubRecursosAutorizacionInicioPagoAspsp = "cajamar"
	GetSubRecursosAutorizacionInicioPagoAspspArquia          GetSubRecursosAutorizacionInicioPagoAspsp = "arquia"
	GetSubRecursosAutorizacionInicioPagoAspspBff             GetSubRecursosAutorizacionInicioPagoAspsp = "BFF"
	GetSubRecursosAutorizacionInicioPagoAspspColonya         GetSubRecursosAutorizacionInicioPagoAspsp = "colonya"
	GetSubRecursosAutorizacionInicioPagoAspspEurocajarural   GetSubRecursosAutorizacionInicioPagoAspsp = "eurocajarural"
	GetSubRecursosAutorizacionInicioPagoAspspEvobanco        GetSubRecursosAutorizacionInicioPagoAspsp = "evobanco"
	GetSubRecursosAutorizacionInicioPagoAspspFiarebancaetica GetSubRecursosAutorizacionInicioPagoAspsp = "fiarebancaetica"
	GetSubRecursosAutorizacionInicioPagoAspspBancopichincha  GetSubRecursosAutorizacionInicioPagoAspsp = "bancopichincha"
	GetSubRecursosAutorizacionInicioPagoAspspUnicajabanco    GetSubRecursosAutorizacionInicioPagoAspsp = "unicajabanco"
	GetSubRecursosAutorizacionInicioPagoAspspCajasur         GetSubRecursosAutorizacionInicioPagoAspsp = "cajasur"
	GetSubRecursosAutorizacionInicioPagoAspspKutxabank       GetSubRecursosAutorizacionInicioPagoAspsp = "kutxabank"
	GetSubRecursosAutorizacionInicioPagoAspspBankinter       GetSubRecursosAutorizacionInicioPagoAspsp = "bankinter"
	GetSubRecursosAutorizacionInicioPagoAspspRenta4          GetSubRecursosAutorizacionInicioPagoAspsp = "renta4"
	GetSubRecursosAutorizacionInicioPagoAspspBce             GetSubRecursosAutorizacionInicioPagoAspsp = "BCE"
	GetSubRecursosAutorizacionInicioPagoAspspLaboralkutxa    GetSubRecursosAutorizacionInicioPagoAspsp = "laboralkutxa"
	GetSubRecursosAutorizacionInicioPagoAspspMediolanum      GetSubRecursosAutorizacionInicioPagoAspsp = "mediolanum"
	GetSubRecursosAutorizacionInicioPagoAspspOpenbank        GetSubRecursosAutorizacionInicioPagoAspsp = "openbank"
	GetSubRecursosAutorizacionInicioPagoAspspIbercaja        GetSubRecursosAutorizacionInicioPagoAspsp = "ibercaja"
	GetSubRecursosAutorizacionInicioPagoAspspSelfbank        GetSubRecursosAutorizacionInicioPagoAspsp = "selfbank"
	GetSubRecursosAutorizacionInicioPagoAspspInversis        GetSubRecursosAutorizacionInicioPagoAspsp = "inversis"
	GetSubRecursosAutorizacionInicioPagoAspspAndbank         GetSubRecursosAutorizacionInicioPagoAspsp = "andbank"
	GetSubRecursosAutorizacionInicioPagoAspspWizink          GetSubRecursosAutorizacionInicioPagoAspsp = "wizink"
)

func (e GetSubRecursosAutorizacionInicioPagoAspsp) ToPointer() *GetSubRecursosAutorizacionInicioPagoAspsp {
	return &e
}

func (e *GetSubRecursosAutorizacionInicioPagoAspsp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redsys":
		fallthrough
	case "BBVA":
		fallthrough
	case "BBVAPT":
		fallthrough
	case "BBVABE":
		fallthrough
	case "BBVAFR":
		fallthrough
	case "BBVAEUK":
		fallthrough
	case "caixabank":
		fallthrough
	case "BancSabadell":
		fallthrough
	case "bancosantander":
		fallthrough
	case "bancamarch":
		fallthrough
	case "bankoa":
		fallthrough
	case "cajamar":
		fallthrough
	case "arquia":
		fallthrough
	case "BFF":
		fallthrough
	case "colonya":
		fallthrough
	case "eurocajarural":
		fallthrough
	case "evobanco":
		fallthrough
	case "fiarebancaetica":
		fallthrough
	case "bancopichincha":
		fallthrough
	case "unicajabanco":
		fallthrough
	case "cajasur":
		fallthrough
	case "kutxabank":
		fallthrough
	case "bankinter":
		fallthrough
	case "renta4":
		fallthrough
	case "BCE":
		fallthrough
	case "laboralkutxa":
		fallthrough
	case "mediolanum":
		fallthrough
	case "openbank":
		fallthrough
	case "ibercaja":
		fallthrough
	case "selfbank":
		fallthrough
	case "inversis":
		fallthrough
	case "andbank":
		fallthrough
	case "wizink":
		*e = GetSubRecursosAutorizacionInicioPagoAspsp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubRecursosAutorizacionInicioPagoAspsp: %v", v)
	}
}

type GetSubRecursosAutorizacionInicioPagoPaymentProduct string

const (
	GetSubRecursosAutorizacionInicioPagoPaymentProductSepaCreditTransfers             GetSubRecursosAutorizacionInicioPagoPaymentProduct = "sepa-credit-transfers"
	GetSubRecursosAutorizacionInicioPagoPaymentProductInstantSepaCreditTransfers      GetSubRecursosAutorizacionInicioPagoPaymentProduct = "instant-sepa-credit-transfers"
	GetSubRecursosAutorizacionInicioPagoPaymentProductTarget2Payments                 GetSubRecursosAutorizacionInicioPagoPaymentProduct = "target-2-payments"
	GetSubRecursosAutorizacionInicioPagoPaymentProductCrossBorderCreditTransfers      GetSubRecursosAutorizacionInicioPagoPaymentProduct = "cross-border-credit-transfers"
	GetSubRecursosAutorizacionInicioPagoPaymentProductDomesticCrossCurrencyPaymentsUk GetSubRecursosAutorizacionInicioPagoPaymentProduct = "domestic-cross-currency-payments-uk"
	GetSubRecursosAutorizacionInicioPagoPaymentProductDomesticChapsPaymentsUk         GetSubRecursosAutorizacionInicioPagoPaymentProduct = "domestic-chaps-payments-uk"
	GetSubRecursosAutorizacionInicioPagoPaymentProductDomesticFasterPaymentsUk        GetSubRecursosAutorizacionInicioPagoPaymentProduct = "domestic-faster-payments-uk"
	GetSubRecursosAutorizacionInicioPagoPaymentProductDomesticBacsPaymentsUk          GetSubRecursosAutorizacionInicioPagoPaymentProduct = "domestic-bacs-payments-uk"
)

func (e GetSubRecursosAutorizacionInicioPagoPaymentProduct) ToPointer() *GetSubRecursosAutorizacionInicioPagoPaymentProduct {
	return &e
}

func (e *GetSubRecursosAutorizacionInicioPagoPaymentProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sepa-credit-transfers":
		fallthrough
	case "instant-sepa-credit-transfers":
		fallthrough
	case "target-2-payments":
		fallthrough
	case "cross-border-credit-transfers":
		fallthrough
	case "domestic-cross-currency-payments-uk":
		fallthrough
	case "domestic-chaps-payments-uk":
		fallthrough
	case "domestic-faster-payments-uk":
		fallthrough
	case "domestic-bacs-payments-uk":
		*e = GetSubRecursosAutorizacionInicioPagoPaymentProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubRecursosAutorizacionInicioPagoPaymentProduct: %v", v)
	}
}

type GetSubRecursosAutorizacionInicioPagoPaymentService string

const (
	GetSubRecursosAutorizacionInicioPagoPaymentServicePayments         GetSubRecursosAutorizacionInicioPagoPaymentService = "payments"
	GetSubRecursosAutorizacionInicioPagoPaymentServiceBulkPayments     GetSubRecursosAutorizacionInicioPagoPaymentService = "bulk-payments"
	GetSubRecursosAutorizacionInicioPagoPaymentServicePeriodicPayments GetSubRecursosAutorizacionInicioPagoPaymentService = "periodic-payments"
)

func (e GetSubRecursosAutorizacionInicioPagoPaymentService) ToPointer() *GetSubRecursosAutorizacionInicioPagoPaymentService {
	return &e
}

func (e *GetSubRecursosAutorizacionInicioPagoPaymentService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "bulk-payments":
		fallthrough
	case "periodic-payments":
		*e = GetSubRecursosAutorizacionInicioPagoPaymentService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubRecursosAutorizacionInicioPagoPaymentService: %v", v)
	}
}

type GetSubRecursosAutorizacionInicioPagoRequest struct {
	// Este dato es contenido si la transacción de inicio de pago forma parte de una sesión (combinación de AIS/PIS). Contendrá el consentId del consentimiento AIS que se realizó previo al inicio de pago. . Ej: Consent-ID: 123-qwer-456
	ConsentID *string `header:"style=simple,explode=false,name=Consent-ID"`
	// Es contenido si viaja el campo Signature. Ej: Digest: SHA-256=NzdmZjA4YjY5M2M2NDYyMmVjOWFmMGNmYTZiNTU3MjVmNDI4NTRlMzJkYzE3ZmNmMDE3ZGFmMjhhNTc5OTU3OQ==
	Digest string `header:"style=simple,explode=false,name=Digest"`
	// Accept header de la petición HTTP entre PSU y el TPP. Ej: PSU-Accept: application/json
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// Accept charset header de la petición HTTP entre PSU y el TPP. PSU-Accept-Charset: utf-8
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// Accept encoding header de la petición HTTP entre PSU y el TPP. PSU-Accept-Language: gzip
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// Accept language header de la petición HTTP entre PSU y el TPP. PSU-Accept-Language: es-ES
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) para un dispositivo. El UUID identifica al dispositivo o a una instalación de una aplicación en un dispositivo. Este ID no debe ser modificado hasta la desinstalación de la aplicación del dispositivo. Ej: PSU-Device-ID: 5b3ab8e8-0fd5-43d2-946e-d75958b172e7
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// Localización correspondiente a la petición HTTP entre el PSU y el TPP. Ej: PSU-Geo-Location: GEO:90.023856;25.345963
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// Método HTTP usado en la interfaz entre PSU y TPP. Valores permitidos: POST. Ej: PSU-Http-Method: POST
	PSUHTTPMethod *string `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Dirección IP de la petición HTPP entre el PSU y el TPP. Si no está disponible, el TPP debe usar la dirección IP usada por el TPP cuando envía esta petición. Ej: Ej: PSU-IP-Address: 192.168.16.5
	PSUIPAddress string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// Puerto IP de la petición HTTP entre el PSU y el TPP si está disponible. Ejemplo: PSU-IP-Port: 443
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// Navegador o sistema operativo de la petición HTTP entre el PSU y el TPP. Ejemplo: PSU-User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// Firma de la petición por el TPP.
	Signature string `header:"style=simple,explode=false,name=Signature"`
	// Si esta URI es contenida, el TPP está solicitando redirigir el flujo de la transacción a esta dirección en vez de al TPP-Redirect-URI en caso de un resultado negativo del método de SCA por redirección. "TPP-Nok-Redirect-URI":"https://www.tpp.com/cb/nok"
	TPPNokRedirectURI *string `header:"style=simple,explode=false,name=TPP-Nok-Redirect-URI"`
	// Si es "true", el TPP ha comunicado al HUB que prefiere SCA por redirección. Si es "false", el TPP ha comunicado al HUB que prefiere no ser redireccionado para SCA y el procedimiento será por flujo desacoplado. Si el parámetro no es usado, el ASPSP elegirá el flujo SCA a aplicar dependiendo del método SCA elegido por el TPP/PSU.
	TPPRedirectPreferred *string `header:"style=simple,explode=false,name=TPP-Redirect-Preferred"`
	// URI del TPP donde el flujo de la transacción debe ser redirigido después de alguna de las fases del SCA. Es recomendado usar siempre este campo de cabecera.En el futuro, este campo podría cambiar a obligatorio. Ej: TPP-Redirect-URI: https://www.tpp.com/cb
	TPPRedirectURI *string `header:"style=simple,explode=false,name=TPP-Redirect-URI"`
	// Certificado del TPP usado para firmar la petición, en base64, sin cabecera, pie ni saltos de linea. Ej: TPP-Signature-Certificate: MIIHgzCCBmugAwIBAgIIZzZvBQlt0UcwDQYJ………….KoZIhvcNAQELBQAwSTELMAkGA1UEBhMCVVMxEzARBgNVBA
	TPPSignatureCertificate string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// Identificador único de la transacción asignado por el TPP. Ej: X-Request-ID: 1b3ab8e8-0fd5-43d2-946e-d75958b172e7
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// Nombre del ASPSP al que desea realizar la petición.(BBVA, Banco Santander ...)
	Aspsp GetSubRecursosAutorizacionInicioPagoAspsp `pathParam:"style=simple,explode=false,name=aspsp"`
	// Identificador del recurso que referencia a la iniciación de pago o consentimiento.
	PaymentID      string                                             `pathParam:"style=simple,explode=false,name=payment-id"`
	PaymentProduct GetSubRecursosAutorizacionInicioPagoPaymentProduct `pathParam:"style=simple,explode=false,name=payment-product"`
	PaymentService GetSubRecursosAutorizacionInicioPagoPaymentService `pathParam:"style=simple,explode=false,name=payment-service"`
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetConsentID() *string {
	if o == nil {
		return nil
	}
	return o.ConsentID
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetDigest() string {
	if o == nil {
		return ""
	}
	return o.Digest
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUAccept() *string {
	if o == nil {
		return nil
	}
	return o.PSUAccept
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUAcceptCharset() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptCharset
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUAcceptEncoding() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptEncoding
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUAcceptLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptLanguage
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUDeviceID() *string {
	if o == nil {
		return nil
	}
	return o.PSUDeviceID
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUGeoLocation() *string {
	if o == nil {
		return nil
	}
	return o.PSUGeoLocation
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.PSUHTTPMethod
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUIPAddress() string {
	if o == nil {
		return ""
	}
	return o.PSUIPAddress
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUIPPort() *string {
	if o == nil {
		return nil
	}
	return o.PSUIPPort
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPSUUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.PSUUserAgent
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetTPPNokRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPNokRedirectURI
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetTPPRedirectPreferred() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectPreferred
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetTPPRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectURI
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetTPPSignatureCertificate() string {
	if o == nil {
		return ""
	}
	return o.TPPSignatureCertificate
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetXRequestID() string {
	if o == nil {
		return ""
	}
	return o.XRequestID
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetAspsp() GetSubRecursosAutorizacionInicioPagoAspsp {
	if o == nil {
		return GetSubRecursosAutorizacionInicioPagoAspsp("")
	}
	return o.Aspsp
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPaymentProduct() GetSubRecursosAutorizacionInicioPagoPaymentProduct {
	if o == nil {
		return GetSubRecursosAutorizacionInicioPagoPaymentProduct("")
	}
	return o.PaymentProduct
}

func (o *GetSubRecursosAutorizacionInicioPagoRequest) GetPaymentService() GetSubRecursosAutorizacionInicioPagoPaymentService {
	if o == nil {
		return GetSubRecursosAutorizacionInicioPagoPaymentService("")
	}
	return o.PaymentService
}

type GetSubRecursosAutorizacionInicioPagoResponse struct {
	ContentType string
	Headers     map[string][]string
	// HTTP/1.1 200 Ok
	ResponseGetSubResourcesAuthorization *shared.ResponseGetSubResourcesAuthorization
	StatusCode                           int
	RawResponse                          *http.Response
}

func (o *GetSubRecursosAutorizacionInicioPagoResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSubRecursosAutorizacionInicioPagoResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetSubRecursosAutorizacionInicioPagoResponse) GetResponseGetSubResourcesAuthorization() *shared.ResponseGetSubResourcesAuthorization {
	if o == nil {
		return nil
	}
	return o.ResponseGetSubResourcesAuthorization
}

func (o *GetSubRecursosAutorizacionInicioPagoResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSubRecursosAutorizacionInicioPagoResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
