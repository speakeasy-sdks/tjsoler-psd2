// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/utils"
	"net/http"
)

// DeletePaymentPaymentProduct - Producto de pago a usar.
type DeletePaymentPaymentProduct string

const (
	DeletePaymentPaymentProductSepaCreditTransfers        DeletePaymentPaymentProduct = "sepa-credit-transfers"
	DeletePaymentPaymentProductInstantSepaCreditTransfers DeletePaymentPaymentProduct = "instant-sepa-credit-transfers"
	DeletePaymentPaymentProductTarget2Payments            DeletePaymentPaymentProduct = "target-2-payments"
	DeletePaymentPaymentProductCrossBorderCreditTransfers DeletePaymentPaymentProduct = "cross-border-credit-transfers"
)

func (e DeletePaymentPaymentProduct) ToPointer() *DeletePaymentPaymentProduct {
	return &e
}

func (e *DeletePaymentPaymentProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sepa-credit-transfers":
		fallthrough
	case "instant-sepa-credit-transfers":
		fallthrough
	case "target-2-payments":
		fallthrough
	case "cross-border-credit-transfers":
		*e = DeletePaymentPaymentProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePaymentPaymentProduct: %v", v)
	}
}

// DeletePaymentPaymentService - Producto de pago a usar.
type DeletePaymentPaymentService string

const (
	DeletePaymentPaymentServicePayments         DeletePaymentPaymentService = "payments"
	DeletePaymentPaymentServiceBulkPayments     DeletePaymentPaymentService = "bulk-payments"
	DeletePaymentPaymentServicePeriodicPayments DeletePaymentPaymentService = "periodic-payments"
)

func (e DeletePaymentPaymentService) ToPointer() *DeletePaymentPaymentService {
	return &e
}

func (e *DeletePaymentPaymentService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "bulk-payments":
		fallthrough
	case "periodic-payments":
		*e = DeletePaymentPaymentService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletePaymentPaymentService: %v", v)
	}
}

type DeletePaymentRequest struct {
	// Es contenido si viaja el campo Signature. Ej: Digest: SHA-256=NzdmZjA4YjY5M2M2NDYyMmVjOWFmMGNmYTZiNTU3MjVmNDI4NTRlMzJkYzE3ZmNmMDE3ZGFmMjhhNTc5OTU3OQ==
	Digest string `header:"style=simple,explode=false,name=Digest"`
	// Accept header de la petición HTTP entre PSU y el TPP. Ej: PSU-Accept: application/json
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// Accept charset header de la petición HTTP entre PSU y el TPP. PSU-Accept-Charset: utf-8
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// Accept encoding header de la petición HTTP entre PSU y el TPP. PSU-Accept-Encoding: gzip
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// Accept language header de la petición HTTP entre PSU y el TPP. PSU-Accept-Language: es-ES
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) para un dispositivo. El UUID identifica al dispositivo o a una instalación de una aplicación en un dispositivo. Este ID no debe ser modificado hasta la desinstalación de la aplicación del dispositivo. Ej: PSU-Device-ID: 5b3ab8e8-0fd5-43d2-946e-d75958b172e7
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// Localización correspondiente a la petición HTTP entre el PSU y el TPP. Ej: PSU-Geo-Location: GEO:90.023856;25.345963
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// Método HTTP usado en la interfaz entre PSU y TPP. Valores permitidos: GET, POST, PUT, PATCH, DELETE. Ej: PSU-Http-Method: GET
	PSUHTTPMethod *string `default:"DELETE" header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Dirección IP de la petición HTPP entre el PSU y el TPP. Si no está disponible, el TPP debe usar la dirección IP usada por el TPP cuando envía esta petición. Ej: Ej: PSU-IP-Address: 192.168.16.5
	PSUIPAddress *string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// Puerto IP de la petición HTTP entre el PSU y el TPP si está disponible. Ejemplo: PSU-IP-Port: 443
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// Navegador o sistema operativo de la petición HTTP entre el PSU y el TPP. Ejemplo: PSU-User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// Firma de la petición por el TPP.
	Signature string `header:"style=simple,explode=false,name=Signature"`
	// Si es igual a true, el TPP prefiere iniciar el proceso de autorización separadamente, por ej. debido a la necesidad de la autorización de un conjunto de operaciones simultáneamente. Si es false o el parámetro no es usado, no hay preferencia del TPP. El TPP asume una autorización directa de la transacción en el siguiente paso. Nota: el ASPSP podría no tenerlo en cuenta si no lo soporta.
	TPPExplicitAuthorisationPreferred *bool `header:"style=simple,explode=false,name=TPP-Explicit-Authorisation-Preferred"`
	// Si esta URI es contenida, el TPP está solicitando redirigir el flujo de la transacción a esta dirección en vez de al TPP-Redirect-URI en caso de un resultado negativo del método de SCA por redirección.
	TPPNokRedirectURI *string `header:"style=simple,explode=false,name=TPP-Nok-Redirect-URI"`
	// Si es "true", el TPP ha comunicado al HUB que prefiere SCA por redirección. Si es "false", el TPP ha comunicado al HUB que prefiere no ser redireccionado para SCA y el procedimiento será por flujo desacoplado. Si el parámetro no es usado, el ASPSP elegirá el flujo SCA a aplicar dependiendo del método SCA elegido por el TPP/PSU. EMBEBIDO NO SOPORTADO EN ESTA VERSIÓN
	TPPRedirectPreferred *bool `header:"style=simple,explode=false,name=TPP-Redirect-Preferred"`
	// URI del TPP donde el flujo de la transacción debe ser redirigido después de alguna de las fases del SCA. Es recomendado usar siempre este campo de cabecera. En el futuro, este campo podría cambiar a obligatorio.
	TPPRedirectURI *string `header:"style=simple,explode=false,name=TPP-Redirect-URI"`
	// Certificado del TPP usado para firmar la petición, en base64, sin cabecera, pie ni saltos de linea. Ej: TPP-Signature-Certificate: MIIHgzCCBmugAwIBAgIIZzZvBQlt0UcwDQYJ………….KoZIhvcNAQELBQAwSTELMAkGA1UEBhMCVVMxEzARBgNVBA
	TPPSignatureCertificate string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// Identificador único de la transacción asignado por el TPP. Ej: X-Request-ID: 1b3ab8e8-0fd5-43d2-946e-d75958b172e7
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// Nombre del ASPSP al que desea realizar la petición.
	Aspsp string `pathParam:"style=simple,explode=false,name=aspsp"`
	// Identificador del recurso que referencia a la iniciación de pago.Enviado previamente como respuesta a un mensaje de iniciación de pago del HUB al ASPSP.
	PaymentID string `pathParam:"style=simple,explode=false,name=payment-id"`
	// Producto de pago a usar.
	PaymentProduct DeletePaymentPaymentProduct `pathParam:"style=simple,explode=false,name=payment-product"`
	// Producto de pago a usar.
	PaymentService DeletePaymentPaymentService `pathParam:"style=simple,explode=false,name=payment-service"`
}

func (d DeletePaymentRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeletePaymentRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DeletePaymentRequest) GetDigest() string {
	if o == nil {
		return ""
	}
	return o.Digest
}

func (o *DeletePaymentRequest) GetPSUAccept() *string {
	if o == nil {
		return nil
	}
	return o.PSUAccept
}

func (o *DeletePaymentRequest) GetPSUAcceptCharset() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptCharset
}

func (o *DeletePaymentRequest) GetPSUAcceptEncoding() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptEncoding
}

func (o *DeletePaymentRequest) GetPSUAcceptLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptLanguage
}

func (o *DeletePaymentRequest) GetPSUDeviceID() *string {
	if o == nil {
		return nil
	}
	return o.PSUDeviceID
}

func (o *DeletePaymentRequest) GetPSUGeoLocation() *string {
	if o == nil {
		return nil
	}
	return o.PSUGeoLocation
}

func (o *DeletePaymentRequest) GetPSUHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.PSUHTTPMethod
}

func (o *DeletePaymentRequest) GetPSUIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.PSUIPAddress
}

func (o *DeletePaymentRequest) GetPSUIPPort() *string {
	if o == nil {
		return nil
	}
	return o.PSUIPPort
}

func (o *DeletePaymentRequest) GetPSUUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.PSUUserAgent
}

func (o *DeletePaymentRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *DeletePaymentRequest) GetTPPExplicitAuthorisationPreferred() *bool {
	if o == nil {
		return nil
	}
	return o.TPPExplicitAuthorisationPreferred
}

func (o *DeletePaymentRequest) GetTPPNokRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPNokRedirectURI
}

func (o *DeletePaymentRequest) GetTPPRedirectPreferred() *bool {
	if o == nil {
		return nil
	}
	return o.TPPRedirectPreferred
}

func (o *DeletePaymentRequest) GetTPPRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectURI
}

func (o *DeletePaymentRequest) GetTPPSignatureCertificate() string {
	if o == nil {
		return ""
	}
	return o.TPPSignatureCertificate
}

func (o *DeletePaymentRequest) GetXRequestID() string {
	if o == nil {
		return ""
	}
	return o.XRequestID
}

func (o *DeletePaymentRequest) GetAspsp() string {
	if o == nil {
		return ""
	}
	return o.Aspsp
}

func (o *DeletePaymentRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *DeletePaymentRequest) GetPaymentProduct() DeletePaymentPaymentProduct {
	if o == nil {
		return DeletePaymentPaymentProduct("")
	}
	return o.PaymentProduct
}

func (o *DeletePaymentRequest) GetPaymentService() DeletePaymentPaymentService {
	if o == nil {
		return DeletePaymentPaymentService("")
	}
	return o.PaymentService
}

type DeletePaymentResponse struct {
	Body []byte
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *DeletePaymentResponse) GetBody() []byte {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *DeletePaymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *DeletePaymentResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *DeletePaymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *DeletePaymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
