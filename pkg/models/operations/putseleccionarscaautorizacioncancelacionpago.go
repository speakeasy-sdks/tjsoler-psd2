// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/models/shared"
	"net/http"
)

// PutSeleccionarSCAAutorizacionCancelacionPagoAspsp - Nombre del ASPSP al que desea realizar la petici√≥n.(BBVA, Banco Santander ...)
type PutSeleccionarSCAAutorizacionCancelacionPagoAspsp string

const (
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspRedsys          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "redsys"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBbva            PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BBVA"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBbvapt          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BBVAPT"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBbvabe          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BBVABE"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBbvafr          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BBVAFR"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBbvaeuk         PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BBVAEUK"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspCaixabank       PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "caixabank"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBancSabadell    PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BancSabadell"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBancosantander  PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "bancosantander"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBancamarch      PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "bancamarch"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBankoa          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "bankoa"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspCajamar         PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "cajamar"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspArquia          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "arquia"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBff             PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BFF"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspColonya         PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "colonya"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspEurocajarural   PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "eurocajarural"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspEvobanco        PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "evobanco"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspFiarebancaetica PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "fiarebancaetica"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBancopichincha  PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "bancopichincha"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspUnicajabanco    PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "unicajabanco"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspCajasur         PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "cajasur"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspKutxabank       PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "kutxabank"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBankinter       PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "bankinter"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspRenta4          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "renta4"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspBce             PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "BCE"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspLaboralkutxa    PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "laboralkutxa"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspMediolanum      PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "mediolanum"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspOpenbank        PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "openbank"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspIbercaja        PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "ibercaja"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspSelfbank        PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "selfbank"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspInversis        PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "inversis"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspAndbank         PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "andbank"
	PutSeleccionarSCAAutorizacionCancelacionPagoAspspWizink          PutSeleccionarSCAAutorizacionCancelacionPagoAspsp = "wizink"
)

func (e PutSeleccionarSCAAutorizacionCancelacionPagoAspsp) ToPointer() *PutSeleccionarSCAAutorizacionCancelacionPagoAspsp {
	return &e
}

func (e *PutSeleccionarSCAAutorizacionCancelacionPagoAspsp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redsys":
		fallthrough
	case "BBVA":
		fallthrough
	case "BBVAPT":
		fallthrough
	case "BBVABE":
		fallthrough
	case "BBVAFR":
		fallthrough
	case "BBVAEUK":
		fallthrough
	case "caixabank":
		fallthrough
	case "BancSabadell":
		fallthrough
	case "bancosantander":
		fallthrough
	case "bancamarch":
		fallthrough
	case "bankoa":
		fallthrough
	case "cajamar":
		fallthrough
	case "arquia":
		fallthrough
	case "BFF":
		fallthrough
	case "colonya":
		fallthrough
	case "eurocajarural":
		fallthrough
	case "evobanco":
		fallthrough
	case "fiarebancaetica":
		fallthrough
	case "bancopichincha":
		fallthrough
	case "unicajabanco":
		fallthrough
	case "cajasur":
		fallthrough
	case "kutxabank":
		fallthrough
	case "bankinter":
		fallthrough
	case "renta4":
		fallthrough
	case "BCE":
		fallthrough
	case "laboralkutxa":
		fallthrough
	case "mediolanum":
		fallthrough
	case "openbank":
		fallthrough
	case "ibercaja":
		fallthrough
	case "selfbank":
		fallthrough
	case "inversis":
		fallthrough
	case "andbank":
		fallthrough
	case "wizink":
		*e = PutSeleccionarSCAAutorizacionCancelacionPagoAspsp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSeleccionarSCAAutorizacionCancelacionPagoAspsp: %v", v)
	}
}

type PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct string

const (
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductSepaCreditTransfers             PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "sepa-credit-transfers"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductInstantSepaCreditTransfers      PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "instant-sepa-credit-transfers"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductTarget2Payments                 PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "target-2-payments"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductCrossBorderCreditTransfers      PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "cross-border-credit-transfers"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductDomesticCrossCurrencyPaymentsUk PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "domestic-cross-currency-payments-uk"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductDomesticChapsPaymentsUk         PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "domestic-chaps-payments-uk"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductDomesticFasterPaymentsUk        PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "domestic-faster-payments-uk"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProductDomesticBacsPaymentsUk          PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct = "domestic-bacs-payments-uk"
)

func (e PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct) ToPointer() *PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct {
	return &e
}

func (e *PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sepa-credit-transfers":
		fallthrough
	case "instant-sepa-credit-transfers":
		fallthrough
	case "target-2-payments":
		fallthrough
	case "cross-border-credit-transfers":
		fallthrough
	case "domestic-cross-currency-payments-uk":
		fallthrough
	case "domestic-chaps-payments-uk":
		fallthrough
	case "domestic-faster-payments-uk":
		fallthrough
	case "domestic-bacs-payments-uk":
		*e = PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct: %v", v)
	}
}

type PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService string

const (
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentServicePayments         PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService = "payments"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentServiceBulkPayments     PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService = "bulk-payments"
	PutSeleccionarSCAAutorizacionCancelacionPagoPaymentServicePeriodicPayments PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService = "periodic-payments"
)

func (e PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService) ToPointer() *PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService {
	return &e
}

func (e *PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "bulk-payments":
		fallthrough
	case "periodic-payments":
		*e = PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService: %v", v)
	}
}

type PutSeleccionarSCAAutorizacionCancelacionPagoRequest struct {
	// Este dato es contenido si la transacci√≥n de inicio de pago forma parte de una sesi√≥n (combinaci√≥n de AIS/PIS). Contendr√° el consentId del consentimiento AIS que se realiz√≥ previo al inicio de pago. . Ej: Consent-ID: 123-qwer-456
	ConsentID *string `header:"style=simple,explode=false,name=Consent-ID"`
	// Es contenido si viaja el campo Signature. Ej: Digest: SHA-256=NzdmZjA4YjY5M2M2NDYyMmVjOWFmMGNmYTZiNTU3MjVmNDI4NTRlMzJkYzE3ZmNmMDE3ZGFmMjhhNTc5OTU3OQ==
	Digest string `header:"style=simple,explode=false,name=Digest"`
	// Accept header de la petici√≥n HTTP entre PSU y el TPP. Ej: PSU-Accept: application/json
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// Accept charset header de la petici√≥n HTTP entre PSU y el TPP. PSU-Accept-Charset: utf-8
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// Accept encoding header de la petici√≥n HTTP entre PSU y el TPP. PSU-Accept-Language: gzip
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// Accept language header de la petici√≥n HTTP entre PSU y el TPP. PSU-Accept-Language: es-ES
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) para un dispositivo. El UUID identifica al dispositivo o a una instalaci√≥n de una aplicaci√≥n en un dispositivo. Este ID no debe ser modificado hasta la desinstalaci√≥n de la aplicaci√≥n del dispositivo. Ej: PSU-Device-ID: 5b3ab8e8-0fd5-43d2-946e-d75958b172e7
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// Localizaci√≥n correspondiente a la petici√≥n HTTP entre el PSU y el TPP. Ej: PSU-Geo-Location: GEO:90.023856;25.345963
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// M√©todo HTTP usado en la interfaz entre PSU y TPP. Valores permitidos: POST. Ej: PSU-Http-Method: POST
	PSUHTTPMethod *string `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Direcci√≥n IP de la petici√≥n HTPP entre el PSU y el TPP. Si no est√° disponible, el TPP debe usar la direcci√≥n IP usada por el TPP cuando env√≠a esta petici√≥n. Ej: Ej: PSU-IP-Address: 192.168.16.5
	PSUIPAddress string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// Puerto IP de la petici√≥n HTTP entre el PSU y el TPP si est√° disponible. Ejemplo: PSU-IP-Port: 443
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// Navegador o sistema operativo de la petici√≥n HTTP entre el PSU y el TPP. Ejemplo: PSU-User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// Firma de la petici√≥n por el TPP.
	Signature string `header:"style=simple,explode=false,name=Signature"`
	// Si esta URI es contenida, el TPP est√° solicitando redirigir el flujo de la transacci√≥n a esta direcci√≥n en vez de al TPP-Redirect-URI en caso de un resultado negativo del m√©todo de SCA por redirecci√≥n. "TPP-Nok-Redirect-URI":"https://www.tpp.com/cb/nok"
	TPPNokRedirectURI *string `header:"style=simple,explode=false,name=TPP-Nok-Redirect-URI"`
	// Si es "true", el TPP ha comunicado al HUB que prefiere SCA por redirecci√≥n. Si es "false", el TPP ha comunicado al HUB que prefiere no ser redireccionado para SCA y el procedimiento ser√° por flujo desacoplado. Si el par√°metro no es usado, el ASPSP elegir√° el flujo SCA a aplicar dependiendo del m√©todo SCA elegido por el TPP/PSU.
	TPPRedirectPreferred *bool `header:"style=simple,explode=false,name=TPP-Redirect-Preferred"`
	// URI del TPP donde el flujo de la transacci√≥n debe ser redirigido despu√©s de alguna de las fases del SCA. Es recomendado usar siempre este campo de cabecera.En el futuro, este campo podr√≠a cambiar a obligatorio. Ej: TPP-Redirect-URI: https://www.tpp.com/cb
	TPPRedirectURI *string `header:"style=simple,explode=false,name=TPP-Redirect-URI"`
	// Certificado del TPP usado para firmar la petici√≥n, en base64, sin cabecera, pie ni saltos de linea. Ej: TPP-Signature-Certificate: MIIHgzCCBmugAwIBAgIIZzZvBQlt0UcwDQYJ‚Ä¶‚Ä¶‚Ä¶‚Ä¶.KoZIhvcNAQELBQAwSTELMAkGA1UEBhMCVVMxEzARBgNVBA
	TPPSignatureCertificate string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// Identificador √∫nico de la transacci√≥n asignado por el TPP. Ej: X-Request-ID: 1b3ab8e8-0fd5-43d2-946e-d75958b172e7
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// Nombre del ASPSP al que desea realizar la petici√≥n.(BBVA, Banco Santander ...)
	Aspsp           PutSeleccionarSCAAutorizacionCancelacionPagoAspsp          `pathParam:"style=simple,explode=false,name=aspsp"`
	AuthorisationID string                                                     `pathParam:"style=simple,explode=false,name=authorisation-id"`
	PaymentID       string                                                     `pathParam:"style=simple,explode=false,name=payment-id"`
	PaymentProduct  PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct `pathParam:"style=simple,explode=false,name=payment-product"`
	PaymentService  PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService `pathParam:"style=simple,explode=false,name=payment-service"`
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetConsentID() *string {
	if o == nil {
		return nil
	}
	return o.ConsentID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetDigest() string {
	if o == nil {
		return ""
	}
	return o.Digest
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAccept() *string {
	if o == nil {
		return nil
	}
	return o.PSUAccept
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptCharset() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptCharset
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptEncoding() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptEncoding
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptLanguage
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUDeviceID() *string {
	if o == nil {
		return nil
	}
	return o.PSUDeviceID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUGeoLocation() *string {
	if o == nil {
		return nil
	}
	return o.PSUGeoLocation
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.PSUHTTPMethod
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUIPAddress() string {
	if o == nil {
		return ""
	}
	return o.PSUIPAddress
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUIPPort() *string {
	if o == nil {
		return nil
	}
	return o.PSUIPPort
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.PSUUserAgent
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPNokRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPNokRedirectURI
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPRedirectPreferred() *bool {
	if o == nil {
		return nil
	}
	return o.TPPRedirectPreferred
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectURI
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPSignatureCertificate() string {
	if o == nil {
		return ""
	}
	return o.TPPSignatureCertificate
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetXRequestID() string {
	if o == nil {
		return ""
	}
	return o.XRequestID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetAspsp() PutSeleccionarSCAAutorizacionCancelacionPagoAspsp {
	if o == nil {
		return PutSeleccionarSCAAutorizacionCancelacionPagoAspsp("")
	}
	return o.Aspsp
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetAuthorisationID() string {
	if o == nil {
		return ""
	}
	return o.AuthorisationID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPaymentProduct() PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct {
	if o == nil {
		return PutSeleccionarSCAAutorizacionCancelacionPagoPaymentProduct("")
	}
	return o.PaymentProduct
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPaymentService() PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService {
	if o == nil {
		return PutSeleccionarSCAAutorizacionCancelacionPagoPaymentService("")
	}
	return o.PaymentService
}

type PutSeleccionarSCAAutorizacionCancelacionPagoResponse struct {
	ContentType string
	Headers     map[string][]string
	// HTTP/1.1 200 Ok
	ResponseAuthorizationInitiationPayment *shared.ResponseAuthorizationInitiationPayment
	StatusCode                             int
	RawResponse                            *http.Response
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetResponseAuthorizationInitiationPayment() *shared.ResponseAuthorizationInitiationPayment {
	if o == nil {
		return nil
	}
	return o.ResponseAuthorizationInitiationPayment
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
