// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/models/shared"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/utils"
	"net/http"
)

// Aspsp - Nombre del ASPSP al que desea realizar la petición.(BBVA, Banco Santander ...)
type Aspsp string

const (
	AspspRedsys          Aspsp = "redsys"
	AspspBbva            Aspsp = "BBVA"
	AspspBbvapt          Aspsp = "BBVAPT"
	AspspBbvabe          Aspsp = "BBVABE"
	AspspBbvafr          Aspsp = "BBVAFR"
	AspspBbvaeuk         Aspsp = "BBVAEUK"
	AspspCaixabank       Aspsp = "caixabank"
	AspspBancSabadell    Aspsp = "BancSabadell"
	AspspBancosantander  Aspsp = "bancosantander"
	AspspBancamarch      Aspsp = "bancamarch"
	AspspBankoa          Aspsp = "bankoa"
	AspspCajamar         Aspsp = "cajamar"
	AspspArquia          Aspsp = "arquia"
	AspspBff             Aspsp = "BFF"
	AspspColonya         Aspsp = "colonya"
	AspspEurocajarural   Aspsp = "eurocajarural"
	AspspEvobanco        Aspsp = "evobanco"
	AspspFiarebancaetica Aspsp = "fiarebancaetica"
	AspspBancopichincha  Aspsp = "bancopichincha"
	AspspUnicajabanco    Aspsp = "unicajabanco"
	AspspCajasur         Aspsp = "cajasur"
	AspspKutxabank       Aspsp = "kutxabank"
	AspspBankinter       Aspsp = "bankinter"
	AspspRenta4          Aspsp = "renta4"
	AspspBce             Aspsp = "BCE"
	AspspLaboralkutxa    Aspsp = "laboralkutxa"
	AspspMediolanum      Aspsp = "mediolanum"
	AspspOpenbank        Aspsp = "openbank"
	AspspIbercaja        Aspsp = "ibercaja"
	AspspSelfbank        Aspsp = "selfbank"
	AspspInversis        Aspsp = "inversis"
	AspspAndbank         Aspsp = "andbank"
	AspspWizink          Aspsp = "wizink"
)

func (e Aspsp) ToPointer() *Aspsp {
	return &e
}

func (e *Aspsp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redsys":
		fallthrough
	case "BBVA":
		fallthrough
	case "BBVAPT":
		fallthrough
	case "BBVABE":
		fallthrough
	case "BBVAFR":
		fallthrough
	case "BBVAEUK":
		fallthrough
	case "caixabank":
		fallthrough
	case "BancSabadell":
		fallthrough
	case "bancosantander":
		fallthrough
	case "bancamarch":
		fallthrough
	case "bankoa":
		fallthrough
	case "cajamar":
		fallthrough
	case "arquia":
		fallthrough
	case "BFF":
		fallthrough
	case "colonya":
		fallthrough
	case "eurocajarural":
		fallthrough
	case "evobanco":
		fallthrough
	case "fiarebancaetica":
		fallthrough
	case "bancopichincha":
		fallthrough
	case "unicajabanco":
		fallthrough
	case "cajasur":
		fallthrough
	case "kutxabank":
		fallthrough
	case "bankinter":
		fallthrough
	case "renta4":
		fallthrough
	case "BCE":
		fallthrough
	case "laboralkutxa":
		fallthrough
	case "mediolanum":
		fallthrough
	case "openbank":
		fallthrough
	case "ibercaja":
		fallthrough
	case "selfbank":
		fallthrough
	case "inversis":
		fallthrough
	case "andbank":
		fallthrough
	case "wizink":
		*e = Aspsp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Aspsp: %v", v)
	}
}

type PaymentProduct string

const (
	PaymentProductSepaCreditTransfers             PaymentProduct = "sepa-credit-transfers"
	PaymentProductInstantSepaCreditTransfers      PaymentProduct = "instant-sepa-credit-transfers"
	PaymentProductTarget2Payments                 PaymentProduct = "target-2-payments"
	PaymentProductCrossBorderCreditTransfers      PaymentProduct = "cross-border-credit-transfers"
	PaymentProductDomesticCrossCurrencyPaymentsUk PaymentProduct = "domestic-cross-currency-payments-uk"
	PaymentProductDomesticChapsPaymentsUk         PaymentProduct = "domestic-chaps-payments-uk"
	PaymentProductDomesticFasterPaymentsUk        PaymentProduct = "domestic-faster-payments-uk"
	PaymentProductDomesticBacsPaymentsUk          PaymentProduct = "domestic-bacs-payments-uk"
)

func (e PaymentProduct) ToPointer() *PaymentProduct {
	return &e
}

func (e *PaymentProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sepa-credit-transfers":
		fallthrough
	case "instant-sepa-credit-transfers":
		fallthrough
	case "target-2-payments":
		fallthrough
	case "cross-border-credit-transfers":
		fallthrough
	case "domestic-cross-currency-payments-uk":
		fallthrough
	case "domestic-chaps-payments-uk":
		fallthrough
	case "domestic-faster-payments-uk":
		fallthrough
	case "domestic-bacs-payments-uk":
		*e = PaymentProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentProduct: %v", v)
	}
}

type PaymentService string

const (
	PaymentServicePayments         PaymentService = "payments"
	PaymentServiceBulkPayments     PaymentService = "bulk-payments"
	PaymentServicePeriodicPayments PaymentService = "periodic-payments"
)

func (e PaymentService) ToPointer() *PaymentService {
	return &e
}

func (e *PaymentService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "bulk-payments":
		fallthrough
	case "periodic-payments":
		*e = PaymentService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentService: %v", v)
	}
}

type PutSeleccionarSCAAutorizacionCancelacionPagoRequest struct {
	// Este dato es contenido si la transacción de inicio de pago forma parte de una sesión (combinación de AIS/PIS). Contendrá el consentId del consentimiento AIS que se realizó previo al inicio de pago. . Ej: Consent-ID: 123-qwer-456
	ConsentID *string `header:"style=simple,explode=false,name=Consent-ID"`
	// Es contenido si viaja el campo Signature. Ej: Digest: SHA-256=NzdmZjA4YjY5M2M2NDYyMmVjOWFmMGNmYTZiNTU3MjVmNDI4NTRlMzJkYzE3ZmNmMDE3ZGFmMjhhNTc5OTU3OQ==
	Digest string `header:"style=simple,explode=false,name=Digest"`
	// Accept header de la petición HTTP entre PSU y el TPP. Ej: PSU-Accept: application/json
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// Accept charset header de la petición HTTP entre PSU y el TPP. PSU-Accept-Charset: utf-8
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// Accept encoding header de la petición HTTP entre PSU y el TPP. PSU-Accept-Language: gzip
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// Accept language header de la petición HTTP entre PSU y el TPP. PSU-Accept-Language: es-ES
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) para un dispositivo. El UUID identifica al dispositivo o a una instalación de una aplicación en un dispositivo. Este ID no debe ser modificado hasta la desinstalación de la aplicación del dispositivo. Ej: PSU-Device-ID: 5b3ab8e8-0fd5-43d2-946e-d75958b172e7
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// Localización correspondiente a la petición HTTP entre el PSU y el TPP. Ej: PSU-Geo-Location: GEO:90.023856;25.345963
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// Método HTTP usado en la interfaz entre PSU y TPP. Valores permitidos: POST. Ej: PSU-Http-Method: POST
	PSUHTTPMethod *string `default:"POST" header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Dirección IP de la petición HTPP entre el PSU y el TPP. Si no está disponible, el TPP debe usar la dirección IP usada por el TPP cuando envía esta petición. Ej: Ej: PSU-IP-Address: 192.168.16.5
	PSUIPAddress string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// Puerto IP de la petición HTTP entre el PSU y el TPP si está disponible. Ejemplo: PSU-IP-Port: 443
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// Navegador o sistema operativo de la petición HTTP entre el PSU y el TPP. Ejemplo: PSU-User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// Firma de la petición por el TPP.
	Signature string `header:"style=simple,explode=false,name=Signature"`
	// Si esta URI es contenida, el TPP está solicitando redirigir el flujo de la transacción a esta dirección en vez de al TPP-Redirect-URI en caso de un resultado negativo del método de SCA por redirección. "TPP-Nok-Redirect-URI":"https://www.tpp.com/cb/nok"
	TPPNokRedirectURI *string `header:"style=simple,explode=false,name=TPP-Nok-Redirect-URI"`
	// Si es "true", el TPP ha comunicado al HUB que prefiere SCA por redirección. Si es "false", el TPP ha comunicado al HUB que prefiere no ser redireccionado para SCA y el procedimiento será por flujo desacoplado. Si el parámetro no es usado, el ASPSP elegirá el flujo SCA a aplicar dependiendo del método SCA elegido por el TPP/PSU.
	TPPRedirectPreferred *bool `header:"style=simple,explode=false,name=TPP-Redirect-Preferred"`
	// URI del TPP donde el flujo de la transacción debe ser redirigido después de alguna de las fases del SCA. Es recomendado usar siempre este campo de cabecera.En el futuro, este campo podría cambiar a obligatorio. Ej: TPP-Redirect-URI: https://www.tpp.com/cb
	TPPRedirectURI *string `header:"style=simple,explode=false,name=TPP-Redirect-URI"`
	// Certificado del TPP usado para firmar la petición, en base64, sin cabecera, pie ni saltos de linea. Ej: TPP-Signature-Certificate: MIIHgzCCBmugAwIBAgIIZzZvBQlt0UcwDQYJ………….KoZIhvcNAQELBQAwSTELMAkGA1UEBhMCVVMxEzARBgNVBA
	TPPSignatureCertificate string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// Identificador único de la transacción asignado por el TPP. Ej: X-Request-ID: 1b3ab8e8-0fd5-43d2-946e-d75958b172e7
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// Nombre del ASPSP al que desea realizar la petición.(BBVA, Banco Santander ...)
	Aspsp           Aspsp          `pathParam:"style=simple,explode=false,name=aspsp"`
	AuthorisationID string         `pathParam:"style=simple,explode=false,name=authorisation-id"`
	PaymentID       string         `pathParam:"style=simple,explode=false,name=payment-id"`
	PaymentProduct  PaymentProduct `pathParam:"style=simple,explode=false,name=payment-product"`
	PaymentService  PaymentService `pathParam:"style=simple,explode=false,name=payment-service"`
}

func (p PutSeleccionarSCAAutorizacionCancelacionPagoRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetConsentID() *string {
	if o == nil {
		return nil
	}
	return o.ConsentID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetDigest() string {
	if o == nil {
		return ""
	}
	return o.Digest
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAccept() *string {
	if o == nil {
		return nil
	}
	return o.PSUAccept
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptCharset() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptCharset
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptEncoding() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptEncoding
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptLanguage
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUDeviceID() *string {
	if o == nil {
		return nil
	}
	return o.PSUDeviceID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUGeoLocation() *string {
	if o == nil {
		return nil
	}
	return o.PSUGeoLocation
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.PSUHTTPMethod
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUIPAddress() string {
	if o == nil {
		return ""
	}
	return o.PSUIPAddress
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUIPPort() *string {
	if o == nil {
		return nil
	}
	return o.PSUIPPort
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPSUUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.PSUUserAgent
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPNokRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPNokRedirectURI
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPRedirectPreferred() *bool {
	if o == nil {
		return nil
	}
	return o.TPPRedirectPreferred
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectURI
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetTPPSignatureCertificate() string {
	if o == nil {
		return ""
	}
	return o.TPPSignatureCertificate
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetXRequestID() string {
	if o == nil {
		return ""
	}
	return o.XRequestID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetAspsp() Aspsp {
	if o == nil {
		return Aspsp("")
	}
	return o.Aspsp
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetAuthorisationID() string {
	if o == nil {
		return ""
	}
	return o.AuthorisationID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPaymentProduct() PaymentProduct {
	if o == nil {
		return PaymentProduct("")
	}
	return o.PaymentProduct
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoRequest) GetPaymentService() PaymentService {
	if o == nil {
		return PaymentService("")
	}
	return o.PaymentService
}

type PutSeleccionarSCAAutorizacionCancelacionPagoResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP/1.1 200 Ok
	ResponseAuthorizationInitiationPayment *shared.ResponseAuthorizationInitiationPayment
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetResponseAuthorizationInitiationPayment() *shared.ResponseAuthorizationInitiationPayment {
	if o == nil {
		return nil
	}
	return o.ResponseAuthorizationInitiationPayment
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PutSeleccionarSCAAutorizacionCancelacionPagoResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
