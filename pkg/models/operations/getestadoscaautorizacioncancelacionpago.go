// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/models/shared"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/utils"
	"net/http"
)

// GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp - Nombre del ASPSP al que desea realizar la petici√≥n.(BBVA, Banco Santander ...)
type GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp string

const (
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspRedsys          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "redsys"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBbva            GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BBVA"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBbvapt          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BBVAPT"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBbvabe          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BBVABE"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBbvafr          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BBVAFR"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBbvaeuk         GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BBVAEUK"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspCaixabank       GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "caixabank"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBancSabadell    GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BancSabadell"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBancosantander  GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "bancosantander"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBancamarch      GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "bancamarch"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBankoa          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "bankoa"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspCajamar         GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "cajamar"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspArquia          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "arquia"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBff             GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BFF"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspColonya         GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "colonya"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspEurocajarural   GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "eurocajarural"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspEvobanco        GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "evobanco"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspFiarebancaetica GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "fiarebancaetica"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBancopichincha  GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "bancopichincha"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspUnicajabanco    GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "unicajabanco"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspCajasur         GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "cajasur"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspKutxabank       GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "kutxabank"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBankinter       GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "bankinter"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspRenta4          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "renta4"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspBce             GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "BCE"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspLaboralkutxa    GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "laboralkutxa"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspMediolanum      GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "mediolanum"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspOpenbank        GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "openbank"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspIbercaja        GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "ibercaja"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspSelfbank        GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "selfbank"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspInversis        GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "inversis"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspAndbank         GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "andbank"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamAspspWizink          GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp = "wizink"
)

func (e GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp) ToPointer() *GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp {
	return &e
}

func (e *GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redsys":
		fallthrough
	case "BBVA":
		fallthrough
	case "BBVAPT":
		fallthrough
	case "BBVABE":
		fallthrough
	case "BBVAFR":
		fallthrough
	case "BBVAEUK":
		fallthrough
	case "caixabank":
		fallthrough
	case "BancSabadell":
		fallthrough
	case "bancosantander":
		fallthrough
	case "bancamarch":
		fallthrough
	case "bankoa":
		fallthrough
	case "cajamar":
		fallthrough
	case "arquia":
		fallthrough
	case "BFF":
		fallthrough
	case "colonya":
		fallthrough
	case "eurocajarural":
		fallthrough
	case "evobanco":
		fallthrough
	case "fiarebancaetica":
		fallthrough
	case "bancopichincha":
		fallthrough
	case "unicajabanco":
		fallthrough
	case "cajasur":
		fallthrough
	case "kutxabank":
		fallthrough
	case "bankinter":
		fallthrough
	case "renta4":
		fallthrough
	case "BCE":
		fallthrough
	case "laboralkutxa":
		fallthrough
	case "mediolanum":
		fallthrough
	case "openbank":
		fallthrough
	case "ibercaja":
		fallthrough
	case "selfbank":
		fallthrough
	case "inversis":
		fallthrough
	case "andbank":
		fallthrough
	case "wizink":
		*e = GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp: %v", v)
	}
}

type GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct string

const (
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductSepaCreditTransfers             GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "sepa-credit-transfers"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductInstantSepaCreditTransfers      GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "instant-sepa-credit-transfers"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductTarget2Payments                 GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "target-2-payments"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductCrossBorderCreditTransfers      GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "cross-border-credit-transfers"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductDomesticCrossCurrencyPaymentsUk GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "domestic-cross-currency-payments-uk"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductDomesticChapsPaymentsUk         GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "domestic-chaps-payments-uk"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductDomesticFasterPaymentsUk        GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "domestic-faster-payments-uk"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProductDomesticBacsPaymentsUk          GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct = "domestic-bacs-payments-uk"
)

func (e GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct) ToPointer() *GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct {
	return &e
}

func (e *GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sepa-credit-transfers":
		fallthrough
	case "instant-sepa-credit-transfers":
		fallthrough
	case "target-2-payments":
		fallthrough
	case "cross-border-credit-transfers":
		fallthrough
	case "domestic-cross-currency-payments-uk":
		fallthrough
	case "domestic-chaps-payments-uk":
		fallthrough
	case "domestic-faster-payments-uk":
		fallthrough
	case "domestic-bacs-payments-uk":
		*e = GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct: %v", v)
	}
}

type GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService string

const (
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentServicePayments         GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService = "payments"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentServiceBulkPayments     GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService = "bulk-payments"
	GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentServicePeriodicPayments GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService = "periodic-payments"
)

func (e GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService) ToPointer() *GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService {
	return &e
}

func (e *GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "bulk-payments":
		fallthrough
	case "periodic-payments":
		*e = GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService: %v", v)
	}
}

type GetEstadoSCAAutorizacionCancelacionPagoRequest struct {
	// Este dato es contenido si la transacci√≥n de inicio de pago forma parte de una sesi√≥n (combinaci√≥n de AIS/PIS). Contendr√° el consentId del consentimiento AIS que se realiz√≥ previo al inicio de pago. . Ej: Consent-ID: 123-qwer-456
	ConsentID *string `header:"style=simple,explode=false,name=Consent-ID"`
	// Es contenido si viaja el campo Signature. Ej: Digest: SHA-256=NzdmZjA4YjY5M2M2NDYyMmVjOWFmMGNmYTZiNTU3MjVmNDI4NTRlMzJkYzE3ZmNmMDE3ZGFmMjhhNTc5OTU3OQ==
	Digest string `header:"style=simple,explode=false,name=Digest"`
	// Accept header de la petici√≥n HTTP entre PSU y el TPP. Ej: PSU-Accept: application/json
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// Accept charset header de la petici√≥n HTTP entre PSU y el TPP. PSU-Accept-Charset: utf-8
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// Accept encoding header de la petici√≥n HTTP entre PSU y el TPP. PSU-Accept-Language: gzip
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// Accept language header de la petici√≥n HTTP entre PSU y el TPP. PSU-Accept-Language: es-ES
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) para un dispositivo. El UUID identifica al dispositivo o a una instalaci√≥n de una aplicaci√≥n en un dispositivo. Este ID no debe ser modificado hasta la desinstalaci√≥n de la aplicaci√≥n del dispositivo. Ej: PSU-Device-ID: 5b3ab8e8-0fd5-43d2-946e-d75958b172e7
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// Localizaci√≥n correspondiente a la petici√≥n HTTP entre el PSU y el TPP. Ej: PSU-Geo-Location: GEO:90.023856;25.345963
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// M√©todo HTTP usado en la interfaz entre PSU y TPP. Valores permitidos: POST. Ej: PSU-Http-Method: POST
	PSUHTTPMethod *string `default:"POST" header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Direcci√≥n IP de la petici√≥n HTPP entre el PSU y el TPP. Si no est√° disponible, el TPP debe usar la direcci√≥n IP usada por el TPP cuando env√≠a esta petici√≥n. Ej: Ej: PSU-IP-Address: 192.168.16.5
	PSUIPAddress string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// Puerto IP de la petici√≥n HTTP entre el PSU y el TPP si est√° disponible. Ejemplo: PSU-IP-Port: 443
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// Navegador o sistema operativo de la petici√≥n HTTP entre el PSU y el TPP. Ejemplo: PSU-User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// Firma de la petici√≥n por el TPP.
	Signature string `header:"style=simple,explode=false,name=Signature"`
	// Si esta URI es contenida, el TPP est√° solicitando redirigir el flujo de la transacci√≥n a esta direcci√≥n en vez de al TPP-Redirect-URI en caso de un resultado negativo del m√©todo de SCA por redirecci√≥n. "TPP-Nok-Redirect-URI":"https://www.tpp.com/cb/nok"
	TPPNokRedirectURI *string `header:"style=simple,explode=false,name=TPP-Nok-Redirect-URI"`
	// Si es "true", el TPP ha comunicado al HUB que prefiere SCA por redirecci√≥n. Si es "false", el TPP ha comunicado al HUB que prefiere no ser redireccionado para SCA y el procedimiento ser√° por flujo desacoplado. Si el par√°metro no es usado, el ASPSP elegir√° el flujo SCA a aplicar dependiendo del m√©todo SCA elegido por el TPP/PSU.
	TPPRedirectPreferred *string `header:"style=simple,explode=false,name=TPP-Redirect-Preferred"`
	// URI del TPP donde el flujo de la transacci√≥n debe ser redirigido despu√©s de alguna de las fases del SCA. Es recomendado usar siempre este campo de cabecera.En el futuro, este campo podr√≠a cambiar a obligatorio. Ej: TPP-Redirect-URI: https://www.tpp.com/cb
	TPPRedirectURI *string `header:"style=simple,explode=false,name=TPP-Redirect-URI"`
	// Certificado del TPP usado para firmar la petici√≥n, en base64, sin cabecera, pie ni saltos de linea. Ej: TPP-Signature-Certificate: MIIHgzCCBmugAwIBAgIIZzZvBQlt0UcwDQYJ‚Ä¶‚Ä¶‚Ä¶‚Ä¶.KoZIhvcNAQELBQAwSTELMAkGA1UEBhMCVVMxEzARBgNVBA
	TPPSignatureCertificate string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// Identificador √∫nico de la transacci√≥n asignado por el TPP. Ej: X-Request-ID: 1b3ab8e8-0fd5-43d2-946e-d75958b172e7
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// Nombre del ASPSP al que desea realizar la petici√≥n.(BBVA, Banco Santander ...)
	Aspsp           GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp `pathParam:"style=simple,explode=false,name=aspsp"`
	AuthorisationID string                                                `pathParam:"style=simple,explode=false,name=authorisation-id"`
	// Identificador del recurso que referencia a la iniciaci√≥n de pago o consentimiento.
	PaymentID      string                                                         `pathParam:"style=simple,explode=false,name=payment-id"`
	PaymentProduct GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct `pathParam:"style=simple,explode=false,name=payment-product"`
	PaymentService GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService `pathParam:"style=simple,explode=false,name=payment-service"`
}

func (g GetEstadoSCAAutorizacionCancelacionPagoRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEstadoSCAAutorizacionCancelacionPagoRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetConsentID() *string {
	if o == nil {
		return nil
	}
	return o.ConsentID
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetDigest() string {
	if o == nil {
		return ""
	}
	return o.Digest
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUAccept() *string {
	if o == nil {
		return nil
	}
	return o.PSUAccept
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptCharset() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptCharset
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptEncoding() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptEncoding
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUAcceptLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptLanguage
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUDeviceID() *string {
	if o == nil {
		return nil
	}
	return o.PSUDeviceID
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUGeoLocation() *string {
	if o == nil {
		return nil
	}
	return o.PSUGeoLocation
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.PSUHTTPMethod
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUIPAddress() string {
	if o == nil {
		return ""
	}
	return o.PSUIPAddress
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUIPPort() *string {
	if o == nil {
		return nil
	}
	return o.PSUIPPort
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPSUUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.PSUUserAgent
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetTPPNokRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPNokRedirectURI
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetTPPRedirectPreferred() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectPreferred
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetTPPRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectURI
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetTPPSignatureCertificate() string {
	if o == nil {
		return ""
	}
	return o.TPPSignatureCertificate
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetXRequestID() string {
	if o == nil {
		return ""
	}
	return o.XRequestID
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetAspsp() GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp {
	if o == nil {
		return GetEstadoSCAAutorizacionCancelacionPagoPathParamAspsp("")
	}
	return o.Aspsp
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetAuthorisationID() string {
	if o == nil {
		return ""
	}
	return o.AuthorisationID
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPaymentProduct() GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct {
	if o == nil {
		return GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentProduct("")
	}
	return o.PaymentProduct
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoRequest) GetPaymentService() GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService {
	if o == nil {
		return GetEstadoSCAAutorizacionCancelacionPagoPathParamPaymentService("")
	}
	return o.PaymentService
}

type GetEstadoSCAAutorizacionCancelacionPagoResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP/1.1 200 Ok
	ResponseGetSCAStatus *shared.ResponseGetSCAStatus
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoResponse) GetResponseGetSCAStatus() *shared.ResponseGetSCAStatus {
	if o == nil {
		return nil
	}
	return o.ResponseGetSCAStatus
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetEstadoSCAAutorizacionCancelacionPagoResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
