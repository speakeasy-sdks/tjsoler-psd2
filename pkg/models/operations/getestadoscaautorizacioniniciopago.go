// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/models/shared"
	"github.com/speakeasy-sdks/tjsoler-psd2/pkg/utils"
	"net/http"
)

// GetEstadoSCAAutorizacionInicioPagoAspsp - Nombre del ASPSP al que desea realizar la petición.(BBVA, Banco Santander ...)
type GetEstadoSCAAutorizacionInicioPagoAspsp string

const (
	GetEstadoSCAAutorizacionInicioPagoAspspRedsys          GetEstadoSCAAutorizacionInicioPagoAspsp = "redsys"
	GetEstadoSCAAutorizacionInicioPagoAspspBbva            GetEstadoSCAAutorizacionInicioPagoAspsp = "BBVA"
	GetEstadoSCAAutorizacionInicioPagoAspspBbvapt          GetEstadoSCAAutorizacionInicioPagoAspsp = "BBVAPT"
	GetEstadoSCAAutorizacionInicioPagoAspspBbvabe          GetEstadoSCAAutorizacionInicioPagoAspsp = "BBVABE"
	GetEstadoSCAAutorizacionInicioPagoAspspBbvafr          GetEstadoSCAAutorizacionInicioPagoAspsp = "BBVAFR"
	GetEstadoSCAAutorizacionInicioPagoAspspBbvaeuk         GetEstadoSCAAutorizacionInicioPagoAspsp = "BBVAEUK"
	GetEstadoSCAAutorizacionInicioPagoAspspCaixabank       GetEstadoSCAAutorizacionInicioPagoAspsp = "caixabank"
	GetEstadoSCAAutorizacionInicioPagoAspspBancSabadell    GetEstadoSCAAutorizacionInicioPagoAspsp = "BancSabadell"
	GetEstadoSCAAutorizacionInicioPagoAspspBancosantander  GetEstadoSCAAutorizacionInicioPagoAspsp = "bancosantander"
	GetEstadoSCAAutorizacionInicioPagoAspspBancamarch      GetEstadoSCAAutorizacionInicioPagoAspsp = "bancamarch"
	GetEstadoSCAAutorizacionInicioPagoAspspBankoa          GetEstadoSCAAutorizacionInicioPagoAspsp = "bankoa"
	GetEstadoSCAAutorizacionInicioPagoAspspCajamar         GetEstadoSCAAutorizacionInicioPagoAspsp = "cajamar"
	GetEstadoSCAAutorizacionInicioPagoAspspArquia          GetEstadoSCAAutorizacionInicioPagoAspsp = "arquia"
	GetEstadoSCAAutorizacionInicioPagoAspspBff             GetEstadoSCAAutorizacionInicioPagoAspsp = "BFF"
	GetEstadoSCAAutorizacionInicioPagoAspspColonya         GetEstadoSCAAutorizacionInicioPagoAspsp = "colonya"
	GetEstadoSCAAutorizacionInicioPagoAspspEurocajarural   GetEstadoSCAAutorizacionInicioPagoAspsp = "eurocajarural"
	GetEstadoSCAAutorizacionInicioPagoAspspEvobanco        GetEstadoSCAAutorizacionInicioPagoAspsp = "evobanco"
	GetEstadoSCAAutorizacionInicioPagoAspspFiarebancaetica GetEstadoSCAAutorizacionInicioPagoAspsp = "fiarebancaetica"
	GetEstadoSCAAutorizacionInicioPagoAspspBancopichincha  GetEstadoSCAAutorizacionInicioPagoAspsp = "bancopichincha"
	GetEstadoSCAAutorizacionInicioPagoAspspUnicajabanco    GetEstadoSCAAutorizacionInicioPagoAspsp = "unicajabanco"
	GetEstadoSCAAutorizacionInicioPagoAspspCajasur         GetEstadoSCAAutorizacionInicioPagoAspsp = "cajasur"
	GetEstadoSCAAutorizacionInicioPagoAspspKutxabank       GetEstadoSCAAutorizacionInicioPagoAspsp = "kutxabank"
	GetEstadoSCAAutorizacionInicioPagoAspspBankinter       GetEstadoSCAAutorizacionInicioPagoAspsp = "bankinter"
	GetEstadoSCAAutorizacionInicioPagoAspspRenta4          GetEstadoSCAAutorizacionInicioPagoAspsp = "renta4"
	GetEstadoSCAAutorizacionInicioPagoAspspBce             GetEstadoSCAAutorizacionInicioPagoAspsp = "BCE"
	GetEstadoSCAAutorizacionInicioPagoAspspLaboralkutxa    GetEstadoSCAAutorizacionInicioPagoAspsp = "laboralkutxa"
	GetEstadoSCAAutorizacionInicioPagoAspspMediolanum      GetEstadoSCAAutorizacionInicioPagoAspsp = "mediolanum"
	GetEstadoSCAAutorizacionInicioPagoAspspOpenbank        GetEstadoSCAAutorizacionInicioPagoAspsp = "openbank"
	GetEstadoSCAAutorizacionInicioPagoAspspIbercaja        GetEstadoSCAAutorizacionInicioPagoAspsp = "ibercaja"
	GetEstadoSCAAutorizacionInicioPagoAspspSelfbank        GetEstadoSCAAutorizacionInicioPagoAspsp = "selfbank"
	GetEstadoSCAAutorizacionInicioPagoAspspInversis        GetEstadoSCAAutorizacionInicioPagoAspsp = "inversis"
	GetEstadoSCAAutorizacionInicioPagoAspspAndbank         GetEstadoSCAAutorizacionInicioPagoAspsp = "andbank"
	GetEstadoSCAAutorizacionInicioPagoAspspWizink          GetEstadoSCAAutorizacionInicioPagoAspsp = "wizink"
)

func (e GetEstadoSCAAutorizacionInicioPagoAspsp) ToPointer() *GetEstadoSCAAutorizacionInicioPagoAspsp {
	return &e
}

func (e *GetEstadoSCAAutorizacionInicioPagoAspsp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redsys":
		fallthrough
	case "BBVA":
		fallthrough
	case "BBVAPT":
		fallthrough
	case "BBVABE":
		fallthrough
	case "BBVAFR":
		fallthrough
	case "BBVAEUK":
		fallthrough
	case "caixabank":
		fallthrough
	case "BancSabadell":
		fallthrough
	case "bancosantander":
		fallthrough
	case "bancamarch":
		fallthrough
	case "bankoa":
		fallthrough
	case "cajamar":
		fallthrough
	case "arquia":
		fallthrough
	case "BFF":
		fallthrough
	case "colonya":
		fallthrough
	case "eurocajarural":
		fallthrough
	case "evobanco":
		fallthrough
	case "fiarebancaetica":
		fallthrough
	case "bancopichincha":
		fallthrough
	case "unicajabanco":
		fallthrough
	case "cajasur":
		fallthrough
	case "kutxabank":
		fallthrough
	case "bankinter":
		fallthrough
	case "renta4":
		fallthrough
	case "BCE":
		fallthrough
	case "laboralkutxa":
		fallthrough
	case "mediolanum":
		fallthrough
	case "openbank":
		fallthrough
	case "ibercaja":
		fallthrough
	case "selfbank":
		fallthrough
	case "inversis":
		fallthrough
	case "andbank":
		fallthrough
	case "wizink":
		*e = GetEstadoSCAAutorizacionInicioPagoAspsp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEstadoSCAAutorizacionInicioPagoAspsp: %v", v)
	}
}

type GetEstadoSCAAutorizacionInicioPagoPaymentProduct string

const (
	GetEstadoSCAAutorizacionInicioPagoPaymentProductSepaCreditTransfers             GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "sepa-credit-transfers"
	GetEstadoSCAAutorizacionInicioPagoPaymentProductInstantSepaCreditTransfers      GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "instant-sepa-credit-transfers"
	GetEstadoSCAAutorizacionInicioPagoPaymentProductTarget2Payments                 GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "target-2-payments"
	GetEstadoSCAAutorizacionInicioPagoPaymentProductCrossBorderCreditTransfers      GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "cross-border-credit-transfers"
	GetEstadoSCAAutorizacionInicioPagoPaymentProductDomesticCrossCurrencyPaymentsUk GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "domestic-cross-currency-payments-uk"
	GetEstadoSCAAutorizacionInicioPagoPaymentProductDomesticChapsPaymentsUk         GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "domestic-chaps-payments-uk"
	GetEstadoSCAAutorizacionInicioPagoPaymentProductDomesticFasterPaymentsUk        GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "domestic-faster-payments-uk"
	GetEstadoSCAAutorizacionInicioPagoPaymentProductDomesticBacsPaymentsUk          GetEstadoSCAAutorizacionInicioPagoPaymentProduct = "domestic-bacs-payments-uk"
)

func (e GetEstadoSCAAutorizacionInicioPagoPaymentProduct) ToPointer() *GetEstadoSCAAutorizacionInicioPagoPaymentProduct {
	return &e
}

func (e *GetEstadoSCAAutorizacionInicioPagoPaymentProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sepa-credit-transfers":
		fallthrough
	case "instant-sepa-credit-transfers":
		fallthrough
	case "target-2-payments":
		fallthrough
	case "cross-border-credit-transfers":
		fallthrough
	case "domestic-cross-currency-payments-uk":
		fallthrough
	case "domestic-chaps-payments-uk":
		fallthrough
	case "domestic-faster-payments-uk":
		fallthrough
	case "domestic-bacs-payments-uk":
		*e = GetEstadoSCAAutorizacionInicioPagoPaymentProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEstadoSCAAutorizacionInicioPagoPaymentProduct: %v", v)
	}
}

type GetEstadoSCAAutorizacionInicioPagoPaymentService string

const (
	GetEstadoSCAAutorizacionInicioPagoPaymentServicePayments         GetEstadoSCAAutorizacionInicioPagoPaymentService = "payments"
	GetEstadoSCAAutorizacionInicioPagoPaymentServiceBulkPayments     GetEstadoSCAAutorizacionInicioPagoPaymentService = "bulk-payments"
	GetEstadoSCAAutorizacionInicioPagoPaymentServicePeriodicPayments GetEstadoSCAAutorizacionInicioPagoPaymentService = "periodic-payments"
)

func (e GetEstadoSCAAutorizacionInicioPagoPaymentService) ToPointer() *GetEstadoSCAAutorizacionInicioPagoPaymentService {
	return &e
}

func (e *GetEstadoSCAAutorizacionInicioPagoPaymentService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "bulk-payments":
		fallthrough
	case "periodic-payments":
		*e = GetEstadoSCAAutorizacionInicioPagoPaymentService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEstadoSCAAutorizacionInicioPagoPaymentService: %v", v)
	}
}

type GetEstadoSCAAutorizacionInicioPagoRequest struct {
	// Este dato es contenido si la transacción de inicio de pago forma parte de una sesión (combinación de AIS/PIS). Contendrá el consentId del consentimiento AIS que se realizó previo al inicio de pago. . Ej: Consent-ID: 123-qwer-456
	ConsentID *string `header:"style=simple,explode=false,name=Consent-ID"`
	// Es contenido si viaja el campo Signature. Ej: Digest: SHA-256=NzdmZjA4YjY5M2M2NDYyMmVjOWFmMGNmYTZiNTU3MjVmNDI4NTRlMzJkYzE3ZmNmMDE3ZGFmMjhhNTc5OTU3OQ==
	Digest string `header:"style=simple,explode=false,name=Digest"`
	// Accept header de la petición HTTP entre PSU y el TPP. Ej: PSU-Accept: application/json
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// Accept charset header de la petición HTTP entre PSU y el TPP. PSU-Accept-Charset: utf-8
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// Accept encoding header de la petición HTTP entre PSU y el TPP. PSU-Accept-Language: gzip
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// Accept language header de la petición HTTP entre PSU y el TPP. PSU-Accept-Language: es-ES
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) para un dispositivo. El UUID identifica al dispositivo o a una instalación de una aplicación en un dispositivo. Este ID no debe ser modificado hasta la desinstalación de la aplicación del dispositivo. Ej: PSU-Device-ID: 5b3ab8e8-0fd5-43d2-946e-d75958b172e7
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// Localización correspondiente a la petición HTTP entre el PSU y el TPP. Ej: PSU-Geo-Location: GEO:90.023856;25.345963
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// Método HTTP usado en la interfaz entre PSU y TPP. Valores permitidos: POST. Ej: PSU-Http-Method: POST
	PSUHTTPMethod *string `default:"POST" header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Dirección IP de la petición HTPP entre el PSU y el TPP. Si no está disponible, el TPP debe usar la dirección IP usada por el TPP cuando envía esta petición. Ej: Ej: PSU-IP-Address: 192.168.16.5
	PSUIPAddress string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// Puerto IP de la petición HTTP entre el PSU y el TPP si está disponible. Ejemplo: PSU-IP-Port: 443
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// Navegador o sistema operativo de la petición HTTP entre el PSU y el TPP. Ejemplo: PSU-User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// Firma de la petición por el TPP.
	Signature string `header:"style=simple,explode=false,name=Signature"`
	// Si esta URI es contenida, el TPP está solicitando redirigir el flujo de la transacción a esta dirección en vez de al TPP-Redirect-URI en caso de un resultado negativo del método de SCA por redirección. "TPP-Nok-Redirect-URI":"https://www.tpp.com/cb/nok"
	TPPNokRedirectURI *string `header:"style=simple,explode=false,name=TPP-Nok-Redirect-URI"`
	// Si es "true", el TPP ha comunicado al HUB que prefiere SCA por redirección. Si es "false", el TPP ha comunicado al HUB que prefiere no ser redireccionado para SCA y el procedimiento será por flujo desacoplado. Si el parámetro no es usado, el ASPSP elegirá el flujo SCA a aplicar dependiendo del método SCA elegido por el TPP/PSU.
	TPPRedirectPreferred *string `header:"style=simple,explode=false,name=TPP-Redirect-Preferred"`
	// URI del TPP donde el flujo de la transacción debe ser redirigido después de alguna de las fases del SCA. Es recomendado usar siempre este campo de cabecera.En el futuro, este campo podría cambiar a obligatorio. Ej: TPP-Redirect-URI: https://www.tpp.com/cb
	TPPRedirectURI *string `header:"style=simple,explode=false,name=TPP-Redirect-URI"`
	// Certificado del TPP usado para firmar la petición, en base64, sin cabecera, pie ni saltos de linea. Ej: TPP-Signature-Certificate: MIIHgzCCBmugAwIBAgIIZzZvBQlt0UcwDQYJ………….KoZIhvcNAQELBQAwSTELMAkGA1UEBhMCVVMxEzARBgNVBA
	TPPSignatureCertificate string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// Identificador único de la transacción asignado por el TPP. Ej: X-Request-ID: 1b3ab8e8-0fd5-43d2-946e-d75958b172e7
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// Nombre del ASPSP al que desea realizar la petición.(BBVA, Banco Santander ...)
	Aspsp GetEstadoSCAAutorizacionInicioPagoAspsp `pathParam:"style=simple,explode=false,name=aspsp"`
	// Identificador del subrecurso asociado al inicio de pago o consentimiento.
	AuthorisationID string                                           `pathParam:"style=simple,explode=false,name=authorisation-id"`
	PaymentID       string                                           `pathParam:"style=simple,explode=false,name=payment-id"`
	PaymentProduct  GetEstadoSCAAutorizacionInicioPagoPaymentProduct `pathParam:"style=simple,explode=false,name=payment-product"`
	PaymentService  GetEstadoSCAAutorizacionInicioPagoPaymentService `pathParam:"style=simple,explode=false,name=payment-service"`
}

func (g GetEstadoSCAAutorizacionInicioPagoRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEstadoSCAAutorizacionInicioPagoRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetConsentID() *string {
	if o == nil {
		return nil
	}
	return o.ConsentID
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetDigest() string {
	if o == nil {
		return ""
	}
	return o.Digest
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUAccept() *string {
	if o == nil {
		return nil
	}
	return o.PSUAccept
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUAcceptCharset() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptCharset
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUAcceptEncoding() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptEncoding
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUAcceptLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PSUAcceptLanguage
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUDeviceID() *string {
	if o == nil {
		return nil
	}
	return o.PSUDeviceID
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUGeoLocation() *string {
	if o == nil {
		return nil
	}
	return o.PSUGeoLocation
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.PSUHTTPMethod
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUIPAddress() string {
	if o == nil {
		return ""
	}
	return o.PSUIPAddress
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUIPPort() *string {
	if o == nil {
		return nil
	}
	return o.PSUIPPort
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPSUUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.PSUUserAgent
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetSignature() string {
	if o == nil {
		return ""
	}
	return o.Signature
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetTPPNokRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPNokRedirectURI
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetTPPRedirectPreferred() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectPreferred
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetTPPRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.TPPRedirectURI
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetTPPSignatureCertificate() string {
	if o == nil {
		return ""
	}
	return o.TPPSignatureCertificate
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetXRequestID() string {
	if o == nil {
		return ""
	}
	return o.XRequestID
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetAspsp() GetEstadoSCAAutorizacionInicioPagoAspsp {
	if o == nil {
		return GetEstadoSCAAutorizacionInicioPagoAspsp("")
	}
	return o.Aspsp
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetAuthorisationID() string {
	if o == nil {
		return ""
	}
	return o.AuthorisationID
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPaymentProduct() GetEstadoSCAAutorizacionInicioPagoPaymentProduct {
	if o == nil {
		return GetEstadoSCAAutorizacionInicioPagoPaymentProduct("")
	}
	return o.PaymentProduct
}

func (o *GetEstadoSCAAutorizacionInicioPagoRequest) GetPaymentService() GetEstadoSCAAutorizacionInicioPagoPaymentService {
	if o == nil {
		return GetEstadoSCAAutorizacionInicioPagoPaymentService("")
	}
	return o.PaymentService
}

type GetEstadoSCAAutorizacionInicioPagoResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP/1.1 200 Ok
	ResponseGetSCAStatus *shared.ResponseGetSCAStatus
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetEstadoSCAAutorizacionInicioPagoResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetEstadoSCAAutorizacionInicioPagoResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetEstadoSCAAutorizacionInicioPagoResponse) GetResponseGetSCAStatus() *shared.ResponseGetSCAStatus {
	if o == nil {
		return nil
	}
	return o.ResponseGetSCAStatus
}

func (o *GetEstadoSCAAutorizacionInicioPagoResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetEstadoSCAAutorizacionInicioPagoResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
