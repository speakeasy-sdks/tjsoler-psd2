// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ResponseGetInfoConsentLinks - Tipos de enlaces recomendados para esta respuesta: account y cardAccount. Dependiendo de la naturaleza del consentimiento.
type ResponseGetInfoConsentLinks struct {
}

// ResponseGetInfoConsentAccess - Accesos solicitados a los servicios.
type ResponseGetInfoConsentAccess struct {
}

// ResponseGetInfoConsentTppMessage - Mensaje para el TPP enviado a través del HUB.
type ResponseGetInfoConsentTppMessage struct {
}

// ResponseGetInfoConsent - HTTP/1.1 201 Created
type ResponseGetInfoConsent struct {
	// Tipos de enlaces recomendados para esta respuesta: account y cardAccount. Dependiendo de la naturaleza del consentimiento.
	Links *ResponseGetInfoConsentLinks
	// Accesos solicitados a los servicios.
	Access ResponseGetInfoConsentAccess
	// Valores permitidos: empty, valid, blocked, expired, deleted
	ConsentStatus string
	// Indica la frecuencia de acceso a la cuenta por día. 1 si es de un solo acceso.
	FrequencyPerDay int64
	// Fecha de la última modificación realizada sobre el consentimiento.
	LastActionDate string
	// Texto enviado al TPP a través del HUB para ser mostrado al PSU.
	PsuMessage *string
	// true: acceso recurrente a la cuenta. false: un solo acceso.
	RecurringIndicator bool
	// Mensaje para el TPP enviado a través del HUB.
	TppMessage *ResponseGetInfoConsentTppMessage
	// Fecha hasta la que el consentimiento solicita acceso. Para crear el consentimiento con el máximo tiempo de acceso posible se debe usar el valor: 9999-12-31 Cuando se recupere el consentimiento, la fecha máxima posible vendrá ajustada.
	ValidUntil string
}

func (o *ResponseGetInfoConsent) GetLinks() *ResponseGetInfoConsentLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *ResponseGetInfoConsent) GetAccess() ResponseGetInfoConsentAccess {
	if o == nil {
		return ResponseGetInfoConsentAccess{}
	}
	return o.Access
}

func (o *ResponseGetInfoConsent) GetConsentStatus() string {
	if o == nil {
		return ""
	}
	return o.ConsentStatus
}

func (o *ResponseGetInfoConsent) GetFrequencyPerDay() int64 {
	if o == nil {
		return 0
	}
	return o.FrequencyPerDay
}

func (o *ResponseGetInfoConsent) GetLastActionDate() string {
	if o == nil {
		return ""
	}
	return o.LastActionDate
}

func (o *ResponseGetInfoConsent) GetPsuMessage() *string {
	if o == nil {
		return nil
	}
	return o.PsuMessage
}

func (o *ResponseGetInfoConsent) GetRecurringIndicator() bool {
	if o == nil {
		return false
	}
	return o.RecurringIndicator
}

func (o *ResponseGetInfoConsent) GetTppMessage() *ResponseGetInfoConsentTppMessage {
	if o == nil {
		return nil
	}
	return o.TppMessage
}

func (o *ResponseGetInfoConsent) GetValidUntil() string {
	if o == nil {
		return ""
	}
	return o.ValidUntil
}
