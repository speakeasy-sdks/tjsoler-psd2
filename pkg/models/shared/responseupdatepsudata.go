// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ResponseUpdatePSUDataLinks - Lista de hipervínculos para ser reconocidos por el HUB. Tipos soportados en esta respuesta: • scaRedirect: en caso de SCA por redirección. Link donde el navegador del PSU debe ser redireccionado por el TPP. • scaStatus: link para consultar el estado SCA correspondiente al sub-recurso de autorización. Este link es solo contenido si un sub-recurso de autorización ha sido creado.
type ResponseUpdatePSUDataLinks struct {
}

// ResponseUpdatePSUDataChoosenScaMethod - NO SOPORTADO EN ESTA VERSIÓN. SOLO EMBEBIDO
type ResponseUpdatePSUDataChoosenScaMethod struct {
}

// CurrencyCoversionFees - Podría ser usado por el ASPSP para transportar comisiones por conversión específica de la moneda asociada a la transferencia de crédito iniciada.
type CurrencyCoversionFees struct {
}

// ResponseUpdatePSUDataEstimatedInterbankSettlementAmount - Importe estimado a ser transferido al beneficiario.
type ResponseUpdatePSUDataEstimatedInterbankSettlementAmount struct {
}

// ResponseUpdatePSUDataEstimatedTotalAmount - Importe el cual se estima que será retirado de la cuenta del ordenante. Nota: este importe incluye comisiones.
type ResponseUpdatePSUDataEstimatedTotalAmount struct {
}

// ResponseUpdatePSUDataTppMessages - Mensaje para el TPP enviado a través del HUB.
type ResponseUpdatePSUDataTppMessages struct {
}

// ResponseUpdatePSUDataTransactionFees - Podría ser usado por el ASPSP para transportar la comisión total de la transacción. Este campo incluye el currencyConversiónFees, si es de aplicación.
type ResponseUpdatePSUDataTransactionFees struct {
}

type ResponseUpdatePSUData struct {
	// Lista de hipervínculos para ser reconocidos por el HUB. Tipos soportados en esta respuesta: • scaRedirect: en caso de SCA por redirección. Link donde el navegador del PSU debe ser redireccionado por el TPP. • scaStatus: link para consultar el estado SCA correspondiente al sub-recurso de autorización. Este link es solo contenido si un sub-recurso de autorización ha sido creado.
	Links ResponseUpdatePSUDataLinks `json:"_links"`
	// NO SOPORTADO EN ESTA VERSIÓN. SOLO EMBEBIDO
	ChoosenScaMethod *ResponseUpdatePSUDataChoosenScaMethod `json:"choosenScaMethod,omitempty"`
	// Podría ser usado por el ASPSP para transportar comisiones por conversión específica de la moneda asociada a la transferencia de crédito iniciada.
	CurrencyCoversionFees *CurrencyCoversionFees `json:"currencyCoversionFees,omitempty"`
	// Importe estimado a ser transferido al beneficiario.
	EstimatedInterbankSettlementAmount *ResponseUpdatePSUDataEstimatedInterbankSettlementAmount `json:"estimatedInterbankSettlementAmount,omitempty"`
	// Importe el cual se estima que será retirado de la cuenta del ordenante. Nota: este importe incluye comisiones.
	EstimatedTotalAmount *ResponseUpdatePSUDataEstimatedTotalAmount `json:"estimatedTotalAmount,omitempty"`
	// Texto enviado al TPP a través del HUB para ser mostrado al PSU.
	PsuMessage *string `json:"psuMessage,omitempty"`
	// Estado SCA
	ScaStatus string `json:"scaStatus"`
	// Mensaje para el TPP enviado a través del HUB.
	TppMessages *ResponseUpdatePSUDataTppMessages `json:"tppMessages,omitempty"`
	// Si es igual a "true", la transacción implicará una comisión según el ASPSP o según lo acordado entre ASPSP y PSU. Si es igual a "false" o no es usado, la transacción no implicará ninguna comisión adicional para el PSU. Si este elemento no es usado, entonces no hay información acerca de comisiones de la transacción, a no ser que el importe de la comisión venga explícitamente en el campo transactionFees y/o currencyConversionFees.
	TransactionFeeIndicator *bool `json:"transactionFeeIndicator,omitempty"`
	// Podría ser usado por el ASPSP para transportar la comisión total de la transacción. Este campo incluye el currencyConversiónFees, si es de aplicación.
	TransactionFees *ResponseUpdatePSUDataTransactionFees `json:"transactionFees,omitempty"`
}

func (o *ResponseUpdatePSUData) GetLinks() ResponseUpdatePSUDataLinks {
	if o == nil {
		return ResponseUpdatePSUDataLinks{}
	}
	return o.Links
}

func (o *ResponseUpdatePSUData) GetChoosenScaMethod() *ResponseUpdatePSUDataChoosenScaMethod {
	if o == nil {
		return nil
	}
	return o.ChoosenScaMethod
}

func (o *ResponseUpdatePSUData) GetCurrencyCoversionFees() *CurrencyCoversionFees {
	if o == nil {
		return nil
	}
	return o.CurrencyCoversionFees
}

func (o *ResponseUpdatePSUData) GetEstimatedInterbankSettlementAmount() *ResponseUpdatePSUDataEstimatedInterbankSettlementAmount {
	if o == nil {
		return nil
	}
	return o.EstimatedInterbankSettlementAmount
}

func (o *ResponseUpdatePSUData) GetEstimatedTotalAmount() *ResponseUpdatePSUDataEstimatedTotalAmount {
	if o == nil {
		return nil
	}
	return o.EstimatedTotalAmount
}

func (o *ResponseUpdatePSUData) GetPsuMessage() *string {
	if o == nil {
		return nil
	}
	return o.PsuMessage
}

func (o *ResponseUpdatePSUData) GetScaStatus() string {
	if o == nil {
		return ""
	}
	return o.ScaStatus
}

func (o *ResponseUpdatePSUData) GetTppMessages() *ResponseUpdatePSUDataTppMessages {
	if o == nil {
		return nil
	}
	return o.TppMessages
}

func (o *ResponseUpdatePSUData) GetTransactionFeeIndicator() *bool {
	if o == nil {
		return nil
	}
	return o.TransactionFeeIndicator
}

func (o *ResponseUpdatePSUData) GetTransactionFees() *ResponseUpdatePSUDataTransactionFees {
	if o == nil {
		return nil
	}
	return o.TransactionFees
}
