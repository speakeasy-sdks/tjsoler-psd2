// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SinglePaymentCreditorAccount - Cuenta del ordenante. Nota: este campo puede ser opcional en algunos servicios como pagos bulk
type SinglePaymentCreditorAccount struct {
}

// SinglePaymentCreditorAddress - Direccion Beneficiario
type SinglePaymentCreditorAddress struct {
}

// SinglePaymentDebtorAccount - Cuenta del ordenante. Nota: este campo puede ser opcional en algunos servicios como pagos bulk
type SinglePaymentDebtorAccount struct {
}

type SinglePaymentExchangeRateInformation struct {
}

// SinglePaymentInstructedAmount - Información de la transferencia realizada.
type SinglePaymentInstructedAmount struct {
}

type SinglePaymentRemittanceInformationStructured struct {
}

type SinglePaymentRemittanceInformationStructuredArray struct {
}

type SinglePayment struct {
	// Valores permitidos: Valores permitidos: • DEBT • CRED • SHAR • SLEV
	ChargeBearer *string `json:"chargeBearer,omitempty"`
	// Cuenta del ordenante. Nota: este campo puede ser opcional en algunos servicios como pagos bulk
	CreditorAccount *SinglePaymentCreditorAccount `json:"creditorAccount,omitempty"`
	// Direccion Beneficiario
	CreditorAddress *SinglePaymentCreditorAddress `json:"creditorAddress,omitempty"`
	// BIC de la cuenta del beneficiario
	CreditorAgent *string `json:"creditorAgent,omitempty"`
	CreditorID    *string `json:"creditorId,omitempty"`
	// Nombre del beneficiario
	CreditorName           *string `json:"creditorName,omitempty"`
	CreditorNameAndAddress *string `json:"creditorNameAndAddress,omitempty"`
	CurrencyOfTranfer      *string `json:"currencyOfTranfer,omitempty"`
	// Cuenta del ordenante. Nota: este campo puede ser opcional en algunos servicios como pagos bulk
	DebtorAccount *SinglePaymentDebtorAccount `json:"debtorAccount,omitempty"`
	DebtorID      *string                     `json:"debtorId,omitempty"`
	// Nombre del ordenante
	DebtorName *string `json:"debtorName,omitempty"`
	// Identificador único end to end.
	EndToEndIdentification  *string                               `json:"endToEndIdentification,omitempty"`
	ExchangeRateInformation *SinglePaymentExchangeRateInformation `json:"exchangeRateInformation,omitempty"`
	// Información de la transferencia realizada.
	InstructedAmount *SinglePaymentInstructedAmount `json:"instructedAmount,omitempty"`
	// Identificación única de la instrucción asignada por la parte instructora
	InstructionIdentification *string `json:"instructionIdentification,omitempty"`
	// Lista de códigos ISO
	PurposeCode                          *string                                            `json:"purposeCode,omitempty"`
	RemittanceInformationStructured      *SinglePaymentRemittanceInformationStructured      `json:"remittanceInformationStructured,omitempty"`
	RemittanceInformationStructuredArray *SinglePaymentRemittanceInformationStructuredArray `json:"remittanceInformationStructuredArray,omitempty"`
	// Informacion Adicional
	RemittanceInformationUnstructured      *string  `json:"remittanceInformationUnstructured,omitempty"`
	RemittanceInformationUnstructuredArray []string `json:"remittanceInformationUnstructuredArray,omitempty"`
	// Fecha de ejecución
	RequestedExecutionDate *string `json:"requestedExecutionDate,omitempty"`
	// Fecha/hora de ejecución
	RequestedExecutionTime *string `json:"requestedExecutionTime,omitempty"`
	// Nivel de servicio.
	ServiceLevel   *string `json:"serviceLevel,omitempty"`
	UltimateDebtor *string `json:"ultimateDebtor,omitempty"`
}

func (o *SinglePayment) GetChargeBearer() *string {
	if o == nil {
		return nil
	}
	return o.ChargeBearer
}

func (o *SinglePayment) GetCreditorAccount() *SinglePaymentCreditorAccount {
	if o == nil {
		return nil
	}
	return o.CreditorAccount
}

func (o *SinglePayment) GetCreditorAddress() *SinglePaymentCreditorAddress {
	if o == nil {
		return nil
	}
	return o.CreditorAddress
}

func (o *SinglePayment) GetCreditorAgent() *string {
	if o == nil {
		return nil
	}
	return o.CreditorAgent
}

func (o *SinglePayment) GetCreditorID() *string {
	if o == nil {
		return nil
	}
	return o.CreditorID
}

func (o *SinglePayment) GetCreditorName() *string {
	if o == nil {
		return nil
	}
	return o.CreditorName
}

func (o *SinglePayment) GetCreditorNameAndAddress() *string {
	if o == nil {
		return nil
	}
	return o.CreditorNameAndAddress
}

func (o *SinglePayment) GetCurrencyOfTranfer() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyOfTranfer
}

func (o *SinglePayment) GetDebtorAccount() *SinglePaymentDebtorAccount {
	if o == nil {
		return nil
	}
	return o.DebtorAccount
}

func (o *SinglePayment) GetDebtorID() *string {
	if o == nil {
		return nil
	}
	return o.DebtorID
}

func (o *SinglePayment) GetDebtorName() *string {
	if o == nil {
		return nil
	}
	return o.DebtorName
}

func (o *SinglePayment) GetEndToEndIdentification() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentification
}

func (o *SinglePayment) GetExchangeRateInformation() *SinglePaymentExchangeRateInformation {
	if o == nil {
		return nil
	}
	return o.ExchangeRateInformation
}

func (o *SinglePayment) GetInstructedAmount() *SinglePaymentInstructedAmount {
	if o == nil {
		return nil
	}
	return o.InstructedAmount
}

func (o *SinglePayment) GetInstructionIdentification() *string {
	if o == nil {
		return nil
	}
	return o.InstructionIdentification
}

func (o *SinglePayment) GetPurposeCode() *string {
	if o == nil {
		return nil
	}
	return o.PurposeCode
}

func (o *SinglePayment) GetRemittanceInformationStructured() *SinglePaymentRemittanceInformationStructured {
	if o == nil {
		return nil
	}
	return o.RemittanceInformationStructured
}

func (o *SinglePayment) GetRemittanceInformationStructuredArray() *SinglePaymentRemittanceInformationStructuredArray {
	if o == nil {
		return nil
	}
	return o.RemittanceInformationStructuredArray
}

func (o *SinglePayment) GetRemittanceInformationUnstructured() *string {
	if o == nil {
		return nil
	}
	return o.RemittanceInformationUnstructured
}

func (o *SinglePayment) GetRemittanceInformationUnstructuredArray() []string {
	if o == nil {
		return nil
	}
	return o.RemittanceInformationUnstructuredArray
}

func (o *SinglePayment) GetRequestedExecutionDate() *string {
	if o == nil {
		return nil
	}
	return o.RequestedExecutionDate
}

func (o *SinglePayment) GetRequestedExecutionTime() *string {
	if o == nil {
		return nil
	}
	return o.RequestedExecutionTime
}

func (o *SinglePayment) GetServiceLevel() *string {
	if o == nil {
		return nil
	}
	return o.ServiceLevel
}

func (o *SinglePayment) GetUltimateDebtor() *string {
	if o == nil {
		return nil
	}
	return o.UltimateDebtor
}
