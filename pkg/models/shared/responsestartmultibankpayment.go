// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ResponseStartMultibankPaymentLinks - Lista de hipervínculos para ser reconocidos por el TPP
type ResponseStartMultibankPaymentLinks struct {
}

// ResponseStartMultibankPaymentChosenScaMethod - NO SOPORTADO EN ESTA VERSIÓN. SOLO EMBEBIDO
type ResponseStartMultibankPaymentChosenScaMethod struct {
}

// ResponseStartMultibankPaymentScaMethods - Este elemento es contenido si SCA es requerido y si el PSU puede elegir entre diferentes métodos de autenticación. Si este dato es contenido también se informará el link "selectAuthenticationM ethod”. Estos métodos deberán ser presentados al PSU. Nota: Solo si ASPSP soporta selección del método SCA
type ResponseStartMultibankPaymentScaMethods struct {
}

// ResponseStartMultibankPaymentTppMessages - Mensaje para el TPP enviado a través del HUB.
type ResponseStartMultibankPaymentTppMessages struct {
}

// ResponseStartMultibankPaymentTransactionFees - Comisiones asociadas al pago.
type ResponseStartMultibankPaymentTransactionFees struct {
}

type ResponseStartMultibankPayment struct {
	// Lista de hipervínculos para ser reconocidos por el TPP
	Links *ResponseStartMultibankPaymentLinks `json:"_links,omitempty"`
	// NO SOPORTADO EN ESTA VERSIÓN. SOLO EMBEBIDO
	ChosenScaMethod *ResponseStartMultibankPaymentChosenScaMethod `json:"chosenScaMethod,omitempty"`
	// Número de factura/recibo
	InvoiceNumber *bool `json:"invoiceNumber,omitempty"`
	// Identificador del recurso que referencia a la iniciación de pago.
	PaymentID string `json:"paymentId"`
	// Texto enviado al TPP a través del HUB para ser mostrado al PSU.
	PsuMessage *string `json:"psuMessage,omitempty"`
	// Este elemento es contenido si SCA es requerido y si el PSU puede elegir entre diferentes métodos de autenticación. Si este dato es contenido también se informará el link "selectAuthenticationM ethod”. Estos métodos deberán ser presentados al PSU. Nota: Solo si ASPSP soporta selección del método SCA
	ScaMethods *ResponseStartMultibankPaymentScaMethods `json:"scaMethods,omitempty"`
	// Mensaje para el TPP enviado a través del HUB.
	TppMessages *ResponseStartMultibankPaymentTppMessages `json:"tppMessages,omitempty"`
	// Si es igual a "true", la transacción implicará una comisión según el ASPSP o según lo acordado entre ASPSP y PSU.
	TransactionFeeIndicator *bool `json:"transactionFeeIndicator,omitempty"`
	// Comisiones asociadas al pago.
	TransactionFees *ResponseStartMultibankPaymentTransactionFees `json:"transactionFees,omitempty"`
	// Estado de la transacción.
	TransactionStatus string `json:"transactionStatus"`
}

func (o *ResponseStartMultibankPayment) GetLinks() *ResponseStartMultibankPaymentLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *ResponseStartMultibankPayment) GetChosenScaMethod() *ResponseStartMultibankPaymentChosenScaMethod {
	if o == nil {
		return nil
	}
	return o.ChosenScaMethod
}

func (o *ResponseStartMultibankPayment) GetInvoiceNumber() *bool {
	if o == nil {
		return nil
	}
	return o.InvoiceNumber
}

func (o *ResponseStartMultibankPayment) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *ResponseStartMultibankPayment) GetPsuMessage() *string {
	if o == nil {
		return nil
	}
	return o.PsuMessage
}

func (o *ResponseStartMultibankPayment) GetScaMethods() *ResponseStartMultibankPaymentScaMethods {
	if o == nil {
		return nil
	}
	return o.ScaMethods
}

func (o *ResponseStartMultibankPayment) GetTppMessages() *ResponseStartMultibankPaymentTppMessages {
	if o == nil {
		return nil
	}
	return o.TppMessages
}

func (o *ResponseStartMultibankPayment) GetTransactionFeeIndicator() *bool {
	if o == nil {
		return nil
	}
	return o.TransactionFeeIndicator
}

func (o *ResponseStartMultibankPayment) GetTransactionFees() *ResponseStartMultibankPaymentTransactionFees {
	if o == nil {
		return nil
	}
	return o.TransactionFees
}

func (o *ResponseStartMultibankPayment) GetTransactionStatus() string {
	if o == nil {
		return ""
	}
	return o.TransactionStatus
}
