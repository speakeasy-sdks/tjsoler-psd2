// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ResponseMultibankAuthorizeConsentEstablishmentLinks - Lista de hipervínculos para ser reconocidos por el TPP
type ResponseMultibankAuthorizeConsentEstablishmentLinks struct {
}

// ResponseMultibankAuthorizeConsentEstablishmentChallengeData - NO SOPORTADO EN ESTA VERSIÓN
type ResponseMultibankAuthorizeConsentEstablishmentChallengeData struct {
}

// ResponseMultibankAuthorizeConsentEstablishmentChosenScaMethod - NO SOPORTADO EN ESTA VERSIÓN
type ResponseMultibankAuthorizeConsentEstablishmentChosenScaMethod struct {
}

// ResponseMultibankAuthorizeConsentEstablishmentScaMethods - Este elemento es contenido si SCA es requerido y si el PSU puede elegir entre diferentes métodos de autenticación. Si este dato es contenido también se informará el link "selectAuthenticationM ethod”. Estos métodos deberán ser presentados al PSU. Nota: Solo si ASPSP soporta selección del método SCA
type ResponseMultibankAuthorizeConsentEstablishmentScaMethods struct {
}

// ResponseMultibankAuthorizeConsentEstablishmentTppMessages - Mensaje para el TPP enviado a través del HUB.
type ResponseMultibankAuthorizeConsentEstablishmentTppMessages struct {
}

// ResponseMultibankAuthorizeConsentEstablishment - Created
type ResponseMultibankAuthorizeConsentEstablishment struct {
	// Lista de hipervínculos para ser reconocidos por el TPP
	Links ResponseMultibankAuthorizeConsentEstablishmentLinks `json:"_links"`
	// Identificador del recurso que referencia al sub-recurso de autorización creado
	AuthorisationID string `json:"authorisationId"`
	// NO SOPORTADO EN ESTA VERSIÓN
	ChallengeData *ResponseMultibankAuthorizeConsentEstablishmentChallengeData `json:"challengeData,omitempty"`
	// NO SOPORTADO EN ESTA VERSIÓN
	ChosenScaMethod *ResponseMultibankAuthorizeConsentEstablishmentChosenScaMethod `json:"chosenScaMethod,omitempty"`
	// Texto enviado al TPP a través del HUB para ser mostrado al PSU.
	PsuMessage *string `json:"psuMessage,omitempty"`
	// Este elemento es contenido si SCA es requerido y si el PSU puede elegir entre diferentes métodos de autenticación. Si este dato es contenido también se informará el link "selectAuthenticationM ethod”. Estos métodos deberán ser presentados al PSU. Nota: Solo si ASPSP soporta selección del método SCA
	ScaMethods *ResponseMultibankAuthorizeConsentEstablishmentScaMethods `json:"scaMethods,omitempty"`
	// Estado SCA
	ScaStatus string `json:"scaStatus"`
	// Mensaje para el TPP enviado a través del HUB.
	TppMessages *ResponseMultibankAuthorizeConsentEstablishmentTppMessages `json:"tppMessages,omitempty"`
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetLinks() ResponseMultibankAuthorizeConsentEstablishmentLinks {
	if o == nil {
		return ResponseMultibankAuthorizeConsentEstablishmentLinks{}
	}
	return o.Links
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetAuthorisationID() string {
	if o == nil {
		return ""
	}
	return o.AuthorisationID
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetChallengeData() *ResponseMultibankAuthorizeConsentEstablishmentChallengeData {
	if o == nil {
		return nil
	}
	return o.ChallengeData
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetChosenScaMethod() *ResponseMultibankAuthorizeConsentEstablishmentChosenScaMethod {
	if o == nil {
		return nil
	}
	return o.ChosenScaMethod
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetPsuMessage() *string {
	if o == nil {
		return nil
	}
	return o.PsuMessage
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetScaMethods() *ResponseMultibankAuthorizeConsentEstablishmentScaMethods {
	if o == nil {
		return nil
	}
	return o.ScaMethods
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetScaStatus() string {
	if o == nil {
		return ""
	}
	return o.ScaStatus
}

func (o *ResponseMultibankAuthorizeConsentEstablishment) GetTppMessages() *ResponseMultibankAuthorizeConsentEstablishmentTppMessages {
	if o == nil {
		return nil
	}
	return o.TppMessages
}
